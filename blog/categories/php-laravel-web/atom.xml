<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Php,laravel,web | Joey's Blog]]></title>
  <link href="http://blog.iyue.club/blog/categories/php-laravel-web/atom.xml" rel="self"/>
  <link href="http://blog.iyue.club/"/>
  <updated>2015-07-14T18:28:22+08:00</updated>
  <id>http://blog.iyue.club/</id>
  <author>
    <name><![CDATA[joey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[简单使用laravel]]></title>
    <link href="http://blog.iyue.club/blog/2015/05/20/learn-laravel-1/"/>
    <updated>2015-05-20T23:11:20+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/05/20/learn-laravel-1</id>
    <content type="html"><![CDATA[<p>去年的时候就留意过<a href="http://laravel.com">laravel</a>这个框架了，对于这种类似rails风格的框架很是有好感，但是一直缺少一个实战操作的机会，让我在个人项目上用laravel是不可能的，追求的就是geek，个人项目暂时不考虑php这门语言。</p>

<p>公司有个简单的项目是做一个简单的统计后台，这个需求使用laravel就很简单了，可以省很多事。具体的代码我托管在<a href="https://github.com/xcaptain/simple-admin.git">github</a>了，想了一下主要的功能包括：</p>

<ol>
<li>登录注册</li>
<li>权限管理</li>
<li>脚本自动化</li>
<li>渲染页面</li>
</ol>


<p>登录注册好办，直接使用laravel自带的Auth库就行，自带的示例就内置了一个简单的登录注册页面。权限管理稍微有点麻烦，不过在github上搜了一下也找到好多个基于角色的权限控制的第三方库，我这里用的是<a href="http://github.com">entrust</a> 脚本自动化指的是后台的数据都来自脚本统计，所以必须要确保脚本能够正确的执行，使用laravel的schedule功能就很方便，可以在代码里面实现定时任务。渲染页面就更加简单了，简单的mvc模式，利用blade模板引擎可以写出很规范的模板。</p>

<p>在这个简单项目中，前端使用的是google开发的<a href="http://materialcss.com">materialcss</a>，类似与<a href="http://getbootstrap.com">bootstrap</a>，也是基于网格的设计，很方便初学者使用。前端数据可视化用到的是百度的<a href="http://www.baidu.com/">echart</a>库。</p>

<p>了解了基本的laravel就能很快上手了，比如说:</p>

<p><code>php artisan make:controller ExampleController</code>可以创建一个控制器。</p>

<p><code>php artisan make:model 'Models\Example'</code>可以创建一个模型，另外还会自动创建一个migrate，因为一个model总是对应着一张表的。</p>

<p><code>php artisan make:console UpdateData --command=update:data</code>会创建一条命令，执行<code>php artisan list</code>就能看到这条命令的介绍，去<code>App\Console\Commands\</code>下面就能找到对应的类了，要实现什么功能往这个类里面加方法就行了。</p>

<p><code>php artisan make:migration create_post_table</code>会自动在<code>database/migrations</code>目录下建立迁移文件，这个文件就是用来建表的，可以很方便的修改模式，而且还能记录开发过程中对表的修改。</p>

<p><code>php artisan migrate</code>会自动查找迁移文件，执行有必要的改动。</p>

<p><code>php artisan db:seed</code>可以自动给测试表填充内容，当然具体的实施得靠人来确定，框架是不可能知道要填入什么数据到哪张表的，对应的文件在<code>database/seeds/</code>下。</p>

<p>剩下的一些都是比较简单的，比如使用<a href="">Carbon</a>来操作时间，使用<a href="">Request</a>来获得http参数，用query builder来构造查询，用Eloquent来提交/读取model。还有一个比较强大的是laravel的路由功能，但是目前用到的还比较简单。</p>

<p>另外今天看到一篇文章，讲的是为什么laravel要放弃models目录，主要原因说的是对于现代web开发来说，MVC有点不够用了，除了model可以操作数据库，读写数据，但是对于别的业务，比如说发送邮件，请求第三方接口，记录日志等等，如果还是按照mvc来这些文件就不知道放哪里了，将决定权交给用户，真是很方便。</p>

<p>未来要做的事情主要包括：</p>

<ol>
<li>完善权限管理，目前只做了很简单的权限判断，还没有给admin帐号分配创建用户，创建角色的功能</li>
<li>整理路由配置，目前只做了2个简单的功能，但是路由就有点混乱了，得把页面分得清晰，构造优雅的url规则</li>
</ol>

]]></content>
  </entry>
  
</feed>
