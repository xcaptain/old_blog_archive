<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Joey's Blog]]></title>
  <link href="http://blog.iyue.club/atom.xml" rel="self"/>
  <link href="http://blog.iyue.club/"/>
  <updated>2015-07-14T18:28:22+08:00</updated>
  <id>http://blog.iyue.club/</id>
  <author>
    <name><![CDATA[joey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Php编码规范]]></title>
    <link href="http://blog.iyue.club/blog/2015/07/14/php-coding-style/"/>
    <updated>2015-07-14T18:05:40+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/07/14/php-coding-style</id>
    <content type="html"><![CDATA[<p>之前写代码的时候一直不是很在意编码规范的问题，感觉只要把代码功能实现了就OK，但是看到越来越多的优秀开
源项目都给自己的项目制定了编码规范，提交PR必须要满足规范才能合并到主干，而且自己搞php开发也已经有1
年了，得开始走向规范化开发的道路。</p>

<p>首先得介绍一下psr2，目前<a href="http://laravel.com/">laravel</a>项目使用的就是这个风格标准，具体的规定
在<a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md">这里</a>
我以前的习惯大部分符合psr2的标准，但是因为渐渐的使用到了很多高级的php特性，比如说closure, trait, 抽象类等，
所以还是得纠正一点小的习惯。</p>

<p>除了psr2这个标准之外，各大公司也有自己内部使用的标准，比如说symfony, wordpress, squiz等，还是靠拢
国际标准吧，目前我的emacs里面的php-mode的设置就是psr2的标准，自动格式化代码省了点心。</p>

<p>代码写完了之后提交到github上却总是发现过不了持续集成(Continuous Integration)的审核，我自己目前几个个人
项目使用的是<a href="https://styleci.io/">styleci</a>这个在线审核的工具，功能很简单但是很强大，最初几次提交
总是会给我返回很多fail，导致严格要求自己按照编码规范来。</p>

<p>为了避免提交之后被styleci给鄙视，从网上找到了<a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP_CodeSniffer</a>这个
小工具，叫做php嗅探器，它其实包括2个小部件，一个是phpcs(php coding style)，另一个是phpcbf(PHP Code Beautifier and Fixer)，
前者只检查代码的问题，后者还会帮忙纠正代码，如果信不过机器帮忙纠正代码，那么之前一定的记得提交代码。根据官方文档上的
说明修改配置，简单使用，效果很不错。后来我又找了一个叫做<a href="https://github.com/nishimaki10/emacs-phpcbf">emacs-phpcbf</a>的
小工具，这个是一个emacs的插件配置好之后可以集成到php-mode里面，稍加配置就可以在保存php文件的时候自动纠正错误。</p>

<p>后面发现通过phpcbf纠错的代码还是不能通过styleci，找了一下发现styleci用的是一个叫做<a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer">php-cs-fixer</a>
的引擎来审核代码的，又对照着装了一个php-cs-fixer，和phpcbf的功能差不多，但是稍微严格一点，对于额外的空行也会删掉。</p>

<p>码农要往正规化方向走，现在养成一下编码规范的习惯，以后再来培养测试驱动的习惯。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[迁移一个discuz站点]]></title>
    <link href="http://blog.iyue.club/blog/2015/06/23/migrate-a-discuz-site/"/>
    <updated>2015-06-23T15:09:46+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/06/23/migrate-a-discuz-site</id>
    <content type="html"><![CDATA[<p>周五晚上帮同事迁移了一个网站，原来的<a href="http://www.huizu100.com">网站</a>是搭建在windows2003服务器上的，使用的是apache2 + php5.3 + mysql5.1 的架构，使用的是一个叫作PHPnow的一键安装包来管理服务器的，这种架构对于个人站长来说很方便，只要设置好了配置就可以自己搭建网站，但是扩展性特别差，简直就是没法维护，win2003本来就是老掉牙的技术了，这种服务器长期跑肯定是会有内存问题的，而用PHPnow搭建的网站，数据库，代码，数据都在一个目录里面，这样潜在的问题太大了，首先就是安全性问题，没有数据库本来应该单独放到一个专门的服务器上的。而且所有数据放在一起对于业务分离，备份也很不方便，一下备份一个几十G大的目录是很浪费资源的。</p>

<p>所以在我的建议下，周五晚上对这个网站做了一个迁移，新的架构是LNMP，ubuntu 15.04 server + nginx 1.6 + hhvm 3.7 + mariadb 10.0.20 + redis 3.0，当然因为服务器只有一台，所以没有做负载均衡，没有做数据库读写分离，也没有做hhvm的均衡，因为等我把环境搭建完的时候就已经很稳定了，所以暂时不打算那么做，下面简单的来说说迁移过程。</p>

<ol>
<li><p>服务器安装
我给的建议是装ubuntu，因为将来环境稳定下来之后要把权限分给站长，让他自己上去查看管理一些进程，而ubuntu的桌面又是比较简单易用的。本来他们是打算安装ubuntu 15.04 desktop版的，但是因为这个版本没法驱动DELL r710服务器自带的硬Raid，所以最后换成server版了。</p></li>
<li><p>nginx，mariadb，hhvm，redis这些软件的安装都很简单，唯一一个比较特殊的功能就是用了hhvm来替换php，不过暂时没有感到太大的性能提升。LNMP环境搭建是很简单的，很快就完成了。</p></li>
<li><p>接下来是服务器配置
最大的问题就是调整分区结构，服务器上有一块300G的自带硬盘，这款盘其实是由2块一样的硬盘搭建的raid0，自带了数据备份功能，所以这块盘理论上来说是不该保存太多系统以外的东西的。然后是1块1T的绿盘，这块盘的年头比较老了，以前的网站就部署在这块盘上，我打算把这个盘拿来当备份盘，还有一块2T的黑盘，这块盘是一块最新最好的数据盘，所以我打算把网站和数据库都放在这块盘上。首先要把这块2T的盘里面的数据备份了，很重要的资料一定得保存，但是里面用PHPNow的工具全量备份了站点，一个备份40G，备份一周的数据，复制这些内容浪费了好多时间。数据备份完了之后就是给硬盘分区，先分区那块2T的盘，准备分4个区，按照300+300+600+600来分，虽然暂时没有想好具体怎么使用，用<code>fdisk /dev/sdb</code>开始分区，分区之后就是创建文件系统，只用ext4，所以<code>mkfs.ext4 /dev/sdbn</code>。</p></li>
<li><p>部署网站
这步就很简单了，直接复制代码，修改配置，修改权限，有一个比较大的问题是discuz的图片是存放在一个叫做<code>data/attachment</code>的目录下的，这些图片完全可以和代码分离，所以拿一块额外的分区来装就行，我是挂载的那个600G的分区到这个目录的。<code>mount /dev/sdb6 /pathtodata/attachment</code>。</p></li>
</ol>


<p>部署完成之后调试了一下网站就跑起来了，但是还有很多要做的事，discuz的代码结构比较混乱，不好改动，而且原来他的网站语言设置是GBK的，涉及到编码问题又更加复杂了，反正直到周日晚上才把问题全部解决，目前就是陆陆续续做一些服务器的小性能调优。</p>

<p>6月25日更新：
这几天陆陆续续发现了一些bug，有样式错误的，有插件报错的，有缓存不能及时清的等等，突然感觉压力好大，工作日只能下班之后有时间做自己的事，端午节3天假2天加一晚上都折腾那个网站去了，本以为是没什么事了，没想到后续的问题更多更麻烦，早知道就不轻易答应人家了，而且以后坚决不再折腾discuz，继续折腾这个东西只会浪费我更多时间。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习gulp]]></title>
    <link href="http://blog.iyue.club/blog/2015/06/07/learn-gulp/"/>
    <updated>2015-06-07T23:56:19+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/06/07/learn-gulp</id>
    <content type="html"><![CDATA[<p>学习使用gulp来进行前端开发</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[上powerline]]></title>
    <link href="http://blog.iyue.club/blog/2015/06/03/use-powerline/"/>
    <updated>2015-06-03T23:27:17+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/06/03/use-powerline</id>
    <content type="html"><![CDATA[<p>看到身边的同事好多都切换到zsh+powerline这样的组合了，总是在我面前炫耀操作git如何方便，用了很久一直没有更新<a href="https://github.com/oh-my-fish/oh-my-fish">oh-my-fish</a>之后，今晚总算是完全更新了一下配置，向更加高大上的方向进发。</p>

<p>首先是安装<a href="https://github.com/oh-my-fish/oh-my-fish">oh-my-fish</a>，这步还是很简单的，有一键安装脚本执行。</p>

<p>然后是安装<a href="https://github.com/powerline/powerline">powerline</a>，这是一个用python写的状态插件，以前我就在vim和emacs上用过，在我的urxvt上面还没有配置过，照着<a href="https://powerline.readthedocs.org/en/latest/">文档</a>简单配置了一下，也是很简单的，但是最后我发现我的urxvt终端模拟器没法使用默认的powerline字体，后来从<a href="https://github.com/powerline/fonts">这里</a>找到了几个字体补丁，把我的.Xresources文件修改一下之后就能使用powerline字体了，真是不错。</p>

<p>现在使用的主题是<a href="https://github.com/oh-my-fish/theme-agnoster">agnoster</a>，功能和配色都挺符合我的胃口的，默认支持powerline，git的状态显示也很不错。</p>

<p>顺便重新配置了一下tmux，以前多任务都是通过urxvt的新建tab来实现的，如果到了别的终端环境如何复用终端呢？还是使用tmux吧，而且也可以配置tmux使得它支持powerline，很不错的setup</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习rails]]></title>
    <link href="http://blog.iyue.club/blog/2015/06/01/learn-rails/"/>
    <updated>2015-06-01T23:44:13+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/06/01/learn-rails</id>
    <content type="html"><![CDATA[<p>学习rails，自己做一个简单的rails项目。</p>

<ol>
<li><p><a href="https://github.com/plataformatec/devise">devise</a>验证权限</p></li>
<li><p><a href="http://www.postgresql.org/">postgresql</a>来持久化数据</p></li>
<li><p><a href="https://github.com/mperham/sidekiq">sidekiq</a>用来做队列</p></li>
<li><p><a href="https://github.com/sj26/mailcatcher">mailcatcher</a>用来捕获测试环境发放的邮件</p></li>
</ol>


<p>每个功能都有对应的gem，web开发真是简化了很多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习git]]></title>
    <link href="http://blog.iyue.club/blog/2015/06/01/learn-git/"/>
    <updated>2015-06-01T14:34:01+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/06/01/learn-git</id>
    <content type="html"><![CDATA[<p>继续学习git，把统计后台的代码从内部git服务器迁移到github上面了，用的是自己的私有仓库。</p>

<p>目前主要用到的功能有：</p>

<ol>
<li><p>添加远程仓库
<code>git remote add origin https://github.com/xcaptain/simple-admin.git</code>
这样就能添加一个远程仓库了，等以后把代码push上去就行了，访问远程仓库的方式有2种，一种是ssh，一种是https，上面这种是https的仓库，也是github默认的访问仓库的方法，
因为ssh太不安全了，对于我们这种生活在封锁国度的老百姓来说，很容易被屏蔽。</p></li>
<li><p>往远程仓库里面提交代码
<code>git commit -m 'some comment'</code>
这样就可以提交代码，返回一个hash值标识的版本号，提交之后代码版本还在本地，如果要多方合作开发，那就得把改动保存到一个大家都可以访问的远程仓库，
<code>git push origin master</code>，把本地版本推送到远程的master分支。</p></li>
<li><p>建立本地分支
<code>git branch dev</code>
这样就在本地创建了一个叫做dev的分支，并且会自动切换到这个dev分支，如果建了好多个分支，想查看当前自己在哪个分支，直接<code>git branch</code>就会列出，当然如果使用的是zsh或者是
fish这样的shell，一般都会有git的插件，可以显示当前所在分支。</p></li>
<li><p>把本地分支添加到远程仓库
<code>git checkout dev</code>切换到dev分支，然后<code>git push origin dev</code>就可以把代码推送到远程仓库的dev分支了。</p></li>
<li><p>打标签
<code>git tag</code>可以查看当前版本库的所有标签信息，如果要添加标签，那么就是<code>git tag -a v0.2 -m '优化流量统计代码，统一风格'</code>添加一个叫作v0.2的标签，并且提交。如果要把
本地的标签信息提交到远程仓库，那么就是<code>git push --tags</code>，然后去github上查看就能看到对应的v0.2版本了。</p></li>
<li><p>查看提交版本
<code>git log</code>, <code>git diff</code>，我一般喜欢用emacs的magit插件来查看diff和版本。</p></li>
<li><p>把未暂存的文件回滚
<code>git checkout file1</code>，这样会从版本库中检出上一个提交的file1的版本，覆盖掉当前这个未提交的版本。</p></li>
<li><p>回滚版本库
这个操作目前做得比较少，都是<code>git reset --hard HEAD~1</code>，来回到上一个版本的，对于这个操作还不熟悉，至少svn回滚已经是很熟悉的了。</p></li>
</ol>


<p>git的功能很强大也很复杂，但是一定是要掌握的，这样才能成为一个合格的项目经理，以后慢慢积累，有新的体会再来更新这篇博客。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php的getter方法]]></title>
    <link href="http://blog.iyue.club/blog/2015/05/23/php-getter/"/>
    <updated>2015-05-23T15:58:40+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/05/23/php-getter</id>
    <content type="html"><![CDATA[<p>这几天做统计后台频繁用到一个叫做<a href="http://carbon.nesbot.com/">Carbon</a>的日期库，用多了发现这个库的接口设计得非常方便，方法非常自然，稍微用几次就知道用法了。比如说好多方法都是静态方法，省去了频繁构造对象的开销。最方便的还是里面的getter方法，<code>$dt-&gt;year</code>就返回了本年，这个year很明显是一个静态方法，因为$dt不是new出来的对象，但是我们看起来就好像是直接访问一个类的属性一样。</p>

<pre><code class="php">class A {
    public function year() {
        return 2015;
    }
    public static function __get($var) {
        return $this-&gt;$var();
    }
}
a = new A;
echo a-&gt;year;
</code></pre>

<p>是getter的一种简单写法，挺不错的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单使用laravel]]></title>
    <link href="http://blog.iyue.club/blog/2015/05/20/learn-laravel-1/"/>
    <updated>2015-05-20T23:11:20+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/05/20/learn-laravel-1</id>
    <content type="html"><![CDATA[<p>去年的时候就留意过<a href="http://laravel.com">laravel</a>这个框架了，对于这种类似rails风格的框架很是有好感，但是一直缺少一个实战操作的机会，让我在个人项目上用laravel是不可能的，追求的就是geek，个人项目暂时不考虑php这门语言。</p>

<p>公司有个简单的项目是做一个简单的统计后台，这个需求使用laravel就很简单了，可以省很多事。具体的代码我托管在<a href="https://github.com/xcaptain/simple-admin.git">github</a>了，想了一下主要的功能包括：</p>

<ol>
<li>登录注册</li>
<li>权限管理</li>
<li>脚本自动化</li>
<li>渲染页面</li>
</ol>


<p>登录注册好办，直接使用laravel自带的Auth库就行，自带的示例就内置了一个简单的登录注册页面。权限管理稍微有点麻烦，不过在github上搜了一下也找到好多个基于角色的权限控制的第三方库，我这里用的是<a href="http://github.com">entrust</a> 脚本自动化指的是后台的数据都来自脚本统计，所以必须要确保脚本能够正确的执行，使用laravel的schedule功能就很方便，可以在代码里面实现定时任务。渲染页面就更加简单了，简单的mvc模式，利用blade模板引擎可以写出很规范的模板。</p>

<p>在这个简单项目中，前端使用的是google开发的<a href="http://materialcss.com">materialcss</a>，类似与<a href="http://getbootstrap.com">bootstrap</a>，也是基于网格的设计，很方便初学者使用。前端数据可视化用到的是百度的<a href="http://www.baidu.com/">echart</a>库。</p>

<p>了解了基本的laravel就能很快上手了，比如说:</p>

<p><code>php artisan make:controller ExampleController</code>可以创建一个控制器。</p>

<p><code>php artisan make:model 'Models\Example'</code>可以创建一个模型，另外还会自动创建一个migrate，因为一个model总是对应着一张表的。</p>

<p><code>php artisan make:console UpdateData --command=update:data</code>会创建一条命令，执行<code>php artisan list</code>就能看到这条命令的介绍，去<code>App\Console\Commands\</code>下面就能找到对应的类了，要实现什么功能往这个类里面加方法就行了。</p>

<p><code>php artisan make:migration create_post_table</code>会自动在<code>database/migrations</code>目录下建立迁移文件，这个文件就是用来建表的，可以很方便的修改模式，而且还能记录开发过程中对表的修改。</p>

<p><code>php artisan migrate</code>会自动查找迁移文件，执行有必要的改动。</p>

<p><code>php artisan db:seed</code>可以自动给测试表填充内容，当然具体的实施得靠人来确定，框架是不可能知道要填入什么数据到哪张表的，对应的文件在<code>database/seeds/</code>下。</p>

<p>剩下的一些都是比较简单的，比如使用<a href="">Carbon</a>来操作时间，使用<a href="">Request</a>来获得http参数，用query builder来构造查询，用Eloquent来提交/读取model。还有一个比较强大的是laravel的路由功能，但是目前用到的还比较简单。</p>

<p>另外今天看到一篇文章，讲的是为什么laravel要放弃models目录，主要原因说的是对于现代web开发来说，MVC有点不够用了，除了model可以操作数据库，读写数据，但是对于别的业务，比如说发送邮件，请求第三方接口，记录日志等等，如果还是按照mvc来这些文件就不知道放哪里了，将决定权交给用户，真是很方便。</p>

<p>未来要做的事情主要包括：</p>

<ol>
<li>完善权限管理，目前只做了很简单的权限判断，还没有给admin帐号分配创建用户，创建角色的功能</li>
<li>整理路由配置，目前只做了2个简单的功能，但是路由就有点混乱了，得把页面分得清晰，构造优雅的url规则</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql基础]]></title>
    <link href="http://blog.iyue.club/blog/2015/05/03/mysql-basics-1/"/>
    <updated>2015-05-03T02:34:28+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/05/03/mysql-basics-1</id>
    <content type="html"><![CDATA[<p>五一第二天泡国图看了一下午关于sql的书，小有所获，才发现以前工作中用到的只是mysql中的一个很小的子集，该好好整理一下了基础知识了，当然对于很基本，已经用得很熟练的知识就不提了。</p>

<h3>什么是sql语言</h3>

<p>sql语言包括：
    DDL（数据定义语言）：创建数据库，创建表，创建视图，创建索引等。
    DML（数据操作语言）：也就是增删改查操作。
    DCL（数据控制语言）：COMMIT，ROLLBACK，GRANT等。</p>

<h3>聚合查询</h3>

<p>聚合查询指的是把一张表的内容分组，相关操作包括<code>count</code>, <code>sum</code>, <code>min</code>, <code>max</code>, <code>avg</code>, <code>group by</code>, <code>having</code>，前面5个是聚合函数，从一大串结果中取出我们要的属性。
后面2个是分组的。<code>group by</code>的语法为:</p>

<pre><code class="sql">select &lt;col1&gt;, &lt;col2&gt;, &lt;col3&gt;
    from &lt;table_name&gt;
[where ...]
group by &lt;col1&gt;, &lt;col2&gt;, &lt;col3&gt;
[having ...]
</code></pre>

<p>有一条限制说的是select子句中的每一个字段都必须出现在group by的子句中，但是我在mysql和postgresql中执行的时候结果确不一样，pgsql有这个限制，而mysql则松散得多。在我看来必须得严格才行，不然在有1对多关系的表中，group by之后的结果可能会让人莫名其妙，难怪很多人都说postgresql比mysql要严谨。</p>

<h3>事务</h3>

<p>事务指的是把一系列操作封装在一起来执行，要么同时执行这一些列操作，要么一个都不执行。这个以前工作也用到的不多，可能公司是以前写代码的人对于这个也不看中吧，基本上都是直接update，insert了。记得以前用python的<code>MySQLdb</code>的时候，如果有插入操作必须手动调用一下commit方法才能把数据写进数据库，那时候还不理解，感觉多了一步操作实在是太麻烦了，现在看来把所有操作都看作事务来执行，手动提交事务对于数据来说还是很安全的。</p>

<p>事务有4个特性：（ACID）</p>

<ol>
<li>原子性（Atomic）：事务是一个整体。</li>
<li>一致性（Consistency）：每个操作都必须满足对应列的约束条件。</li>
<li>隔离性（Isolation）：没一个事务中的数据对另一个事务都是不可见的，在提交操作之前，数据不在表里面。</li>
<li>持久性（Duration）：每个事务完成之后会有日志记录，方便从日志恢复数据。</li>
</ol>


<p>创建事务：</p>

<pre><code class="sql">start | begin transaction
sql1;
sql2;
...
commit
</code></pre>

<p>现在仔细想想原来看过好多同时更新多张表的代码没有走事务，那些业务真是太危险了，一张表的结构出错可能就导致整个业务逻辑崩溃。</p>

<h3>视图</h3>

<p>视图类似与一张表，但是区别是表里面存放着数据，但是视图里面没有数据。可以用</p>

<pre><code class="sql">create view &lt;视图名&gt; [&lt;col1&gt;, &lt;col2&gt;]
as
select &lt;col1&gt;, &lt;col2&gt; ...
    from
&lt;表名&gt;
</code></pre>

<p>来创建一个视图。视图主要是为调用很频繁的sql做的，省得每次都得写一大段sql，视图还可以层叠，也就是cascade，不过这功能又太偏了，单用view就已经很少了。不过不知道在view中执行查询有没有比直接在表中查询快，如果仅仅是为了sql简洁就发明视图这个概念出来那也太浪费了吧。</p>

<p>视图是子查询的基础，子查询可以看作是一个视图。</p>

<h3>表的集合操作</h3>

<p>表在关系代数中其实就是集合，所以可以交集，并集，查集。</p>

<h3>表连结</h3>

<p>以前大学的时候学离散数学，数据库原理都讲了关系代数，但是才刚刚毕业一年就几乎忘光了，到目前只知道内联接外联接，连用形式化语言来描述连接都做不到，实在是辜负大学四年了，不过现在做应用开发，基本的理论知识看起来又有点鸡肋。</p>

<p>连接分为内联接，外联接。
inner join &lt;=> join
left outer join &lt;=> left join
right outer join &lt;=> right join
尽量避免直接写outer join，这样会使语义模糊。</p>

<h3>基本查询惯例</h3>

<ol>
<li>建表的时候用<code>primary key(id)</code>来创建主键，以前我都是喜欢写在一个列的限制性约束条件后面。</li>
<li>在表明不相等关系的时候使用<code>&lt;&gt;</code>而不是<code>!=</code>，前者才是标准写法。</li>
<li><code>char</code>类型是按照字典顺序来排序的，一直以来我都以为是按照ascii的顺序来排的。</li>
<li>在建表的时候尽量避免使用NULL这个变量，因为在查询中空值比较不好处理，不好比较大小，不好做运算，不好count，我也不打算去研究NULL在各种情况下的意义。判断一个字段是否为NULL用<code>IS NULL</code>来判断。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个简单的元编程的例子]]></title>
    <link href="http://blog.iyue.club/blog/2015/04/17/php-meta-programming-1/"/>
    <updated>2015-04-17T17:33:16+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/04/17/php-meta-programming-1</id>
    <content type="html"><![CDATA[<p>去年在学习ruby的时候就看到了很多元编程的例子，用一个方法来生成多个类似的方法，避免制造重复的代码，ruby用的是method_missing来实现的。</p>

<p>今天工作遇到一个小问题，需要写一个简单的脚本来统计某个时间段用户的发帖信息，需求很简单要实现也很简单。最初的设计见下面：</p>

<pre><code class="php">class UpdateUserRank {
public function __construct() {}
public function getDayRank($num) {}
public function getMonthRank($num) {}
public function getAllRank($num) {}

public function setDayRank() {}
public function setMonthRank() {}
public function setAllRank() {}
}
</code></pre>

<p>需要写3个get方法，3个set方法，这种形式实在是太不方便维护了，每个函数的功能类似，而且函数名也类似，有没有什么办法能够不要写这么多函数呢？利用php的<code>__call</code>方法可以很简单的实现</p>

<pre><code class="php">class UpdateUserRank {
public function __construct() {
    $this-&gt;getMethods = array('getDayRank', 'getMonthRank', 'getAllRank');
    $this-&gt;setMethods = array('setDayRank', 'setMonthRank', 'setAllRank');
}
public function __call($name, $args) {
    if(in_array($name, $this-&gt;getMethods)) {
        $num = $args[0];
        return $this-&gt;redis-&gt;zrevrange($this-&gt;_key($name), 0, $num, true);
    } elseif(in_array($name, $this-&gt;setMethods)) {
        $nowtime = time();
        if($name == 'setDayRank') {
            $ago = $nowtime - 24 * 3600;
            $key = 'getDayRank';
        } elseif($name == 'setMonthRank') {
            $ago = $nowtime - 24 * 3600 * 30;
            $key = 'getMonthRank';
        } else {
            $ago = 0;
            $key = 'getAllRank';
        }
        $sql = "select authorid, count(authorid) as threadnum from dz_forum_thread where dateline between $ago and $nowtime group by authorid";
        $sth = $this-&gt;pdo-&gt;prepare($sql);
        $sth-&gt;execute();
        while($row = $sth-&gt;fetch(PDO::FETCH_ASSOC)) {
            $authorid = $row['authorid'];
            $threadnum = $row['threadnum'];
            $this-&gt;redis-&gt;zAdd($this-&gt;_key($key), $threadnum, $authorid);
        }
    } else {
        echo "不合法的方法: " . $name . "\n";
        exit(1);
    }
}
}
</code></pre>

<p>调用一个类里面的方法时，如果在当前类没有找到这个方法就会逐层往父类查找，直到找到对应的方法，但是如果这个类或者是父类定义了<code>__call</code>方法，则能自动处理找不到的方法，接受2个参数，第一个是函数名，第二个是函数名传过来的参数，是一个数组。基本上可以说<code>__call</code>实现了<code>method not defined</code>这个异常的处理吧。</p>

<p>因为php的正则没有ruby简单，所以在这里我先定义了2个数组，对象调用的方法必须在这2个数组中才能执行，否则就报不合法的方法，然后退出，也许还可以通过<code>__get</code>, <code>__set</code>来实现，谁知道呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Btrfs损坏之后的一系列麻烦]]></title>
    <link href="http://blog.iyue.club/blog/2015/03/26/btrfs-crash/"/>
    <updated>2015-03-26T23:12:37+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/03/26/btrfs-crash</id>
    <content type="html"><![CDATA[<p>上周六晚上玩电脑的时候忘记插上电源了，直接导致笔记本意外断电关机，本来这只是一件小事，重启电脑即可，个人电脑一般没有多大的磁盘IO，数据基本都是在内存中读写的，但是等我重启电脑的时候却发现没法进系统了，一直卡在fsck那步，然后就是一直提示出现多少个<code>block error</code>，心立刻亮了半截，我用的arch没有做备份，如果硬盘损坏，里面的重要文件就都没了。于是重启进入win8下载了一个system-rescue-cd打算进入livecd修复分区，进去之后执行<code>btrfs check --repair /dev/sda3</code>，倒是检查出了一个块错误，但是没有修复，尝试重启电脑，结果出现<code>bad super block, unknown fs</code>，似乎问题加重了，上网搜了一下superblock损坏的话要找备份的superblock来替换，但是我没有定时做文件系统备份，行不通，后来尝试给<code>btrfs check</code>加上<code>--init-scum</code>参数，重启之后一大堆错误，死心，对数据不报期望了。</p>

<p>上一个系统用了1年多没换，好不容易有一次机会折腾可不能放过，先尝试安装funtoo，和以前无数次一样，都是到最后驱动不了我的博通无线网卡，后面尝试sabayon这个桌面系统，自带了桌面肯定自带了所有驱动。尝试安装，这回小心了，把<code>/boot</code>单独放到一个ext2的分区中去了，然后/用的是xfs，毕竟SGI的技术还是非常可以的。安装之后果然不需要手动装驱动，这种傻瓜式操作我最喜欢了，gnome中总是配置不好fcitx，而且ghc编译的时候总是会报错，也是莫名其妙的问题，supervisor的配置都得自己手动写，一大堆反人类的事情真是头疼，被arch的KISS哲学熏陶得simple且stupid之后，实在是受不了gentoo的diy思想。用<code>btrfs restore /mnt/arch /mnt/arch_bak</code>备份大部分数据之后，继续重装arch。</p>

<p>备份分区之后就多出了一个分区可以用来安装第三个系统，对于懒人来说肯定不愿意折腾文本安装界面，直接下载antergos的livecd开始图形化安装，一步一步做，选文件系统的时候还是不死心，不愿意放弃心爱的btrfs，又做死选了它。系统倒是很快就装好了，麻烦的地方是配置，不过默认的gnome3界面用得真心不习惯，所有应用窗口挤在一个桌面上，反复切换实在是太麻烦了。在安装fcitx输入法的时候不小心<code>systemctl stop dbus.service</code>，结果gnome桌面自动推出了，卡在一个黑乎乎的界面，对于一切操作都没有响应，强制关机之后发现又进不了硬盘了，满头黑线。</p>

<p>反正这个新安装的系统没有什么数据，重装即可，这回发誓在也不用btrfs了，试试ext4这个根正苗红的linux传人，果然一切OK，有线无线网卡自动激活，电源管理自带，安装xmonad没问题，安装fcitx一切顺利，安装dmenu用来管理菜单，安装urxvt，复制之前的Xresources文件，安装fish，安装vim，安装emacs，安装supervisor，安装shadowsocks，安装proxychains，github上面拷贝spf13的vim配置，prelude的emacs配置，oh-my-fish，一切都是这么简单，几乎不需要自己做额外的配置。进入熟悉的xmonad界面之后内心久久不能平静，我就喜欢这种一份配置一直使用的wm。最大的遗憾就是没能找回原来用的rsa密钥对，也就是说我的服务器连接都得重新来一遍，password-store也不能用了，几十个密码没法导出来。</p>

<p>从周日开始一知道今天（周四），花了太多时间，上班也用的是公司的电脑，太影响效率了，不过还好一切都解决了。总结一下这场事故中学到的东西吧：</p>

<ol>
<li>数据无价，平时得定时做好数据备份工作。鉴于xfs和ext4都没有磁盘快照功能，所以只能备份文件了，btsync似乎是一个不错的选择。</li>
<li>不要把/boot和/放在一起，其实最好的分区规范应该是分为/boot, /usr, /这3块，这样就算/挂了，还能进入内核利用/usr里面的软件来修复自身。</li>
<li>btrfs最近2年都不会再去碰了，虽然有很多很新的特性，但是一个礼拜伤我2次，这份大仇2年内都不能忘记。</li>
<li>配置文件非常重要，最好是保存在网上，之前仅仅star了一下prelude的配置导致后面很多本地的自定义都没有提交到自己的仓库，分区崩溃之后自己写的代码都没了。</li>
<li>最后再赞美一下xmonad，这是我用过的最好的桌面了。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use-orgmode]]></title>
    <link href="http://blog.iyue.club/blog/2015/03/15/use-orgmode/"/>
    <updated>2015-03-15T00:58:56+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/03/15/use-orgmode</id>
    <content type="html"><![CDATA[<p>最近看书学习感觉非常没有劲，究其原因感觉是缺少一个做笔记的工具，原来那支跟随我4年的钢笔放家里没有带过来，
京东上预订的lamy也还没有到货，看书不动笔我是什么都记不住的，所以感觉学习效率低了很多。印象笔记确实不错，
配合浏览器的markdown-here扩展就能支持markdown语法了，但是缺少一个所见即所得的笔记客户端，用markdown写完
之后转换为html还是感觉不够方便，并且总是要有网才能看到和编辑笔记很不方便。gnome自带的tomboy我也尝试了，
这东西更加不好用，连markdown都不支持怎么能拿来记笔记。</p>

<p>今天反正周六闲着没事就拿起了orgmode的<a href="http://orgmode.org/org.html">手册</a> 来看，看了几页竟然发现org转md是这么方便，果断以后就用emacs来
记笔记了，又学会一个新技能。</p>

<ul>
<li>下面就来讲讲org做笔记的基本用法吧:

<ol>
<li>使用星号来表明段落的层级，和md的使用#差不多的概念</li>
<li>支持有序列表，无序列表，语法和md类似，org或自动缩进对其每个列表项，如果发现不匹配了那就肯定某个地方缩进出问题了</li>
<li>插入链接\[[链接]\[名字]] 这样就能插入一条链接了</li>
<li>用\\来断行，这样就不必要把一段话写在一行了</li>
<li>C-c C-e m m 来导出markdown文件</li>
</ol>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs自定义grep-find的模板]]></title>
    <link href="http://blog.iyue.club/blog/2015/03/07/emacs-grep-find/"/>
    <updated>2015-03-07T22:40:19+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/03/07/emacs-grep-find</id>
    <content type="html"><![CDATA[<p>被emacs的搜索功能纠结好久了，今天下定决心来解决一下。以前执行<code>grep-find</code>命令的时候查找的模板都是<code>find . -type f -exec grep -nH -e {} +</code>，但是这条命令在fish下没法用，找了一下发现在<a href="https://github.com/fish-shell/fish-shell/issues/95">这个issue</a>里面作者提到了为什么fish里面没法用find，因为在fish里面<code>{}</code>是有意义的，所以就会提示exec缺少参数，所以如果写成<code>find . -type f -exec grep -nH -e '{}' +</code>就可以了，接下来的任务就是修改emacs的配置，把默认的<code>grep-find</code>的行为改掉。</p>

<p>因为查找功能是emacs默认就有的，所以我直接就去源代码目录找了，在<code>/usr/share/emacs/24.4/</code>下执行<code>grep 'grep-find' -R *</code>，然后在<code>lisp/ldefs-boot.el</code>和<code>lisp/loaddefs.el</code>找到了相关的代码，然后试着修改第12669行，这行看起来像是相关的代码，结果改完了半天不生效，无奈之下去<a href="http://stackoverflow.com/questions/28915372/change-the-default-find-grep-command-in-emacs/">stackoverflow</a>提问，这个网站效率真的不是一般的高，很快就拿到答案了，有人说我找到的代码只不过是docstring而已，要修改的话得改<code>grep-find-template</code>,通过<code>C-h v</code>查看了一下这个变量的值，默认的是<code>"find . &lt;X&gt; -type f &lt;F&gt; -exec grep &lt;C&gt; -nH -e &lt;R&gt; {} +"</code>，修改它就行了，编辑<code>~/.emacs.d/personal/custom.el</code>，在最底下加上<code>(setq grep-find-template "find . &lt;X&gt; -type f &lt;F&gt; -exec grep &lt;C&gt; -nH -e &lt;R&gt; \'{}\' +")</code>，然后<code>eval-buffer</code>，问题完美解决，不得不说emacs真是灵活，不用改源代码就能实现自定义功能。</p>

<p>后面又修改了<code>find-grep-dired</code>的模板，好像这条命令没有模板，所以我直接改的代码，<code>/usr/share/emacs/24.4/lisp/find-dired.el.gz</code>编辑第278行，把{}转义了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习emacs-eww]]></title>
    <link href="http://blog.iyue.club/blog/2015/01/28/emacs-eww/"/>
    <updated>2015-01-28T22:50:06+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/01/28/emacs-eww</id>
    <content type="html"><![CDATA[<p>最近一段时间比较无聊，<a href="http://www.iyue.club">http://www.iyue.club</a>一直没有去维护了，目标不明确，不知道奋斗目标。
而且工作的事比较无聊，不断的重构原有的代码，想着怎么尽量把代码写短写优化，接触的新东西也不多，这么久没有学习新东西都让我感到深深的危机感了。</p>

<p>目前的计划还是慢慢来学习ruby on rails，所以空闲时间就做点有意思的事情了。现在来记录一下eww的用法，以后便于查阅，熟能生巧。eww的文档可以通过emacs自身来查看，现在就来总结一下emacs文档里对eww的介绍，我都是通过<code>C-h r</code>来打开emacs自带的info然后查找到eww的章节然后开始看的。</p>

<p>基本操作：</p>

<ol>
<li><code>M-x eww RET</code>输入url或者关键字，就可以打开url或者用内建的dockdockgo来搜索。</li>
<li><code>l</code> 回到上一个页面，回退。</li>
<li><code>r</code> 回到下一个页面，回进。</li>
<li><code>d</code> 下载当前链接，默认保存在<code>~/Downloads</code>，这个快捷键对于下载图片很方便。</li>
<li><code>g</code> 刷新当前页面。</li>
<li><code>w</code> 复制当前url到剪切板。</li>
<li><code>H</code> 查看历史记录。</li>
<li><code>b</code> 添加书签。</li>
<li><code>B</code> 查看书签。</li>
<li><code>&amp;</code> 调用外部浏览器打开当前url。</li>
<li><code>v</code> 查看当前页面源码，如果安装了html-mode就会用html-mode来渲染。</li>
<li><code>C</code> 查看所有存在的cookie</li>
</ol>


<p>上面这些东西都可以查看文档得到，比较没有营养，还是学习新东西有意思。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用btsync]]></title>
    <link href="http://blog.iyue.club/blog/2015/01/20/use-btsync/"/>
    <updated>2015-01-20T18:18:25+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/01/20/use-btsync</id>
    <content type="html"><![CDATA[<p><meta charset="UTF-8"/>
昨天从<a href="http://program-think.blogspot.com/">编程随想</a>的博客上知道了<a href="https://www.getsync.com/">btsync</a>这个东西，用来p2p分享文件很是方便，所以我也尝试了一下，配置很简单，我在自己的笔记本和公司电脑都装好了，这样上班的时候2台电脑同步文件就方便了。</p>

<p>但是遇到了一个有点麻烦的问题，在最初我能够脸上p2p网络，并且找到了供源的机器，但是就是没法和他们同步，总是提示和另一方时间偏差太大无法同步，搜了一下发现是系统时间设置的问题，通过<a href="https://wiki.archlinux.org/index.php/Time">wiki</a>又好好了解了一下linux的时间机制。</p>

<p>linux上的时间包括2种，一是硬件时间，另一个是系统时间。</p>

<ol>
<li><p>硬件时间：(Real Time Clock, RTC)是由机器硬件记录的时间，根据<a href="http://www.tldp.org/LDP/sag/html/hw-sw-clocks.html">tldp</a>的说法，个人电脑都内建了一块独立的电池，来给一个时钟供电，这个时钟可以通过BIOS来设置，或者开机之后通过操作系统来设置。</p></li>
<li><p>系统时间:(software clock)，这个时间是由linux内核来设置的。在系统中存放着一个叫做<code>/etc/adjtime</code>的配置文件，我本机这个文件是7月份创建的，也就是我上次重装系统的时间，是linux的初始系统时间，之后linux估计用了某种还不清楚的手段，每次开机都会更新最新的系统时间。</p></li>
</ol>


<p>我的问题就是系统时间和硬件时间不一致，估计是因为双系统和windows共存导致的，解决方法就是通过执行<code>sudo hwclock --systz</code>来把系统时间和硬件时间都和本地时区的时间对齐。时区配置文件是<code>/etc/localtime</code>这个文件可以通过<code>timedatectl</code>命令来设置，也可以手动建立到<code>/usr/share/zoneinfo/Asia/Hong_Kong</code>的软链接，或者是直接复制<code>/usr/share/zoneinfo/Hong_Kong</code>到<code>/etc/localtime</code>来设置。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python2编码问题]]></title>
    <link href="http://blog.iyue.club/blog/2015/01/13/python-encoding/"/>
    <updated>2015-01-13T08:06:21+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/01/13/python-encoding</id>
    <content type="html"><![CDATA[<p>这篇文章是要记录今天写一个采集是遇到的编码问题的，但是因为在写博客时遇到了一些问题，所以也就顺便记录一下。</p>

<p>在执行rake new_post的时候，突然提示</p>

<pre>
rake aborted!
LoadError: cannot load such file -- bundler/setup
/home/joey/octopress/Rakefile:2:in `<top (required)>'
(See full trace by running task with --trace)
</pre>


<p>突然感觉很奇怪，前几天更新博客的时候都没有遇到这种情况，后来执行<code>rake --trace</code>的时候发现</p>

<pre>
/usr/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require'
/usr/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require'
/home/joey/octopress/Rakefile:2:in `<top (required)>'
/usr/lib/ruby/2.2.0/rake/rake_module.rb:28:in `load'
/usr/lib/ruby/2.2.0/rake/rake_module.rb:28:in `load_rakefile'
/usr/lib/ruby/2.2.0/rake/application.rb:689:in `raw_load_rakefile'
/usr/lib/ruby/2.2.0/rake/application.rb:94:in `block in load_rakefile'
/usr/lib/ruby/2.2.0/rake/application.rb:176:in `standard_exception_handling'
/usr/lib/ruby/2.2.0/rake/application.rb:93:in `load_rakefile'
/usr/lib/ruby/2.2.0/rake/application.rb:77:in `block in run'
/usr/lib/ruby/2.2.0/rake/application.rb:176:in `standard_exception_handling'
/usr/lib/ruby/2.2.0/rake/application.rb:75:in `run'
/usr/bin/rake:33:in `<main>'
</pre>


<p>原来是系统ruby的版本更新到2.2了，以前是2.1的，octopress用的是2.1的gem，也许是和2.2的ruby不兼容吧，所以要重装2.2的gem套系，执行<code>proxychains gem install bundle</code>，有经验了必须要通过代理才能访问rubygem网站，下载完之后需要把<code>/home/joey/.gem/ruby/2.2.0/bin</code> 添加到环境变量中，因为我用的是fish，所以编辑<code>~/.config/fish/config.fish</code>就行了。然后用bundle安装完必要的依赖<code>proxychains bundle install</code>，下载一大堆gem，最后发现系统用的rake已经是10.4.2版的了，而配置文件中需要的还是10.4.0,手动编辑一下<code>Gemfile.lock</code>，把版本号改过来就行了，后来又重装了一下<code>safe_yaml</code>和<code>liquid</code>，把对应的版本号也都改过来了，一个小版本升级搞得这么麻烦，真是郁闷。</p>

<p>接下来就是说说今天写代码遇到的问题了。</p>

<p>需求很简单（话说写采集需求都很明确），这回需要的是采集明星的信息，第一个方案用的是采集baidu整理的明星信息，过程很简单，写了一个简单的脚本采了900条数据，但是后来发现图片做了防盗链，采集过来的图片不是图片的绝对路径，而是通过一台服务器生成的图片，也许是做了cookie的限制或者是做了ip的限制，导致每次刷新页面的时候都会返回一个403错误，链接在<a href="http://www.baidu.com/s?wd=%E6%98%8E%E6%98%9F%E5%A4%A7%E5%85%A8&amp;rsv_spt=1&amp;issp=1&amp;f=8&amp;rsv_bp=0&amp;rsv_idx=2&amp;ie=utf-8&amp;tn=baiduhome_pg&amp;rsv_enter=1&amp;rsv_sug3=4&amp;rsv_sug4=83&amp;rsv_sug1=3&amp;rsv_pq=d5fdf7cd00002ac7&amp;rsv_t=975c0jUWTeYgIUYA%2FfdqSJ75f%2BipUP9QR9v8Qgqb2jzy3rnHgTU3k4rBD%2B5moP73i00p&amp;rsv_sug2=0&amp;inputT=5564">这里</a>，以后有时间也许会去看看这个防盗链的实现，但是现在我可懒得花时间去研究怎么破解这个限制，那就换别的站采集吧。</p>

<p>和产品沟通了一下，他也觉得如果死扣baidu是不明智的选择，后来换成360整理的资源了，链接在<a href="http://www.haosou.com/s?ie=utf-8&amp;shb=1&amp;src=360sou_newhome&amp;q=%E6%98%8E%E6%98%9F%E5%A4%A7%E5%85%A8">这里</a>，数据也比较明确，分成3栏：领域，地域，性别，这个分类还是比较好的，以后我们拿来查询也方便。通过chrome开发工具，找到了js的接口，简单分析了一下就知道要获取那块数据，接下来就是敲代码了，最后的代码在<a href="https://gist.github.com/xcaptain/cbf9980f1b30b2467d8a">这里</a>，本来是打算试试octopress对于gist的支持的，但是因为gist在国内被墙了，会影响整篇文章的阅读，所以就换个链接在这里，有兴趣的朋友就去看看。</p>

<p>在写代码过程中遇到一个编码问题，困扰我很久，不过最终还是解决了。</p>

<p>在使用python2的时候，要自己手动设置编码，python默认的字符串编码是ascii，这就导致如果在python2程序中出现了中文都会提示一个语法错误，但是如果在python2文件中强制加上一句<code># -*- coding: utf-8 -*-</code> 这样python在执行程序的时候就知道使用utf-8来编码里面的字符串了。也许是我本地locale的设置，在打开python解释器的时候总是会自动帮我使用utf-8编码。
首先说说ascii编码，ascii只能编码代码点从0到127的字符，也就是英文字符，如果遇到代码点很高的字符，比如说中文，就没法争取的编码了，就会报错。下面来举几个例子：</p>

<pre><code class="python2">s1 = '你好，world' #这里如果指定了文件的编码为utf-8，会自动把这个字符串编码成utf-8
s1 =&gt; '\xe4\xbd\xa0\xe5\xa5\xbd\xef\xbc\x8cworld'
s2 = u'你好，world' #这里前面加了一个u来表明这个字符串是一个unicode字符串
s2 =&gt; u'\u4f60\u597d\uff0cworld'
u2 = s2.encode('utf-8')
u2 =&gt; '\xe4\xbd\xa0\xe5\xa5\xbd\xef\xbc\x8cworld'
</code></pre>

<p>字符串在内存中应该是用类似utf-8的形式存储的，这样比较节省内存空间，而且也不会出现太多的0导致字符串在大尾和小尾机器上的不兼容。所以对于一个python字符串的旅程可以大致归结为：</p>

<ol>
<li>在编辑器里写下<code>s1 = '你好，world'</code>然后保存为一个python文件的时候，编辑器会自动选择某种编码来保存这个文件，一般来说都是用的utf-8。</li>
<li>python把这个程序加载进解释器的时候，会根据文件头来判断使用什么编码来解码这个文件，也就是<code># -*-coding: utf-8 -*-</code>这行，如果没有这行就会用默认的<code>ascii</code>来解码。</li>
<li>这时候程序里的字符串都是utf8的。
写到这里突然发现昨晚的问题实在不算问题，看来之前是没有静下心来研究，写博客还是有好处的。</li>
</ol>


<p>接下来再看看python3,python3的默认编码是unicode，而实际存在内存中的就是字节码，bytecode。也就是说一个字符串只有2种状态，unicode和byte，这样就节省很多事情了，没有各种编码解码的麻烦。
<code>python3
s = '你好，world' #这是一个str类型的字符串
b1 = s.encode('utf-8') #这是把s编码为utf-8后的字节码
b2 = s.encode('gbk') #把s编码为gbk后的字节码
</code>
相对于2来说，3最大的进步就是不需要手动encode，decode，对于处理未知编码的文件最方便了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩弄git]]></title>
    <link href="http://blog.iyue.club/blog/2015/01/06/play-with-git/"/>
    <updated>2015-01-06T06:54:11+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/01/06/play-with-git</id>
    <content type="html"><![CDATA[<p>经过元旦几天的努力，论坛正式上线了<a href="http://f.joxy.org">http://f.joxy.org</a>，目前仅仅是使用了<a href="https://github.com/discourse/discourse">discourse</a>的框架，自己还没有开始定制，总是需要一个熟悉的过程的，本地的开发环境因为邮件的问题，现在还没有好，挺郁闷的。</p>

<p>今晚就稍微熟悉了一下discourse的结构。</p>

<ol>
<li>我本地的开发环境，这个没什么多说的，就是用vagrant跑了一个虚拟机，上面运行着discourse需要的环境。</li>
<li>线上的环境是用docker运行的，这是官方推荐的安装方式，说实话最初我竟然没有明白discourse的架构。</li>
</ol>


<p>其实也是很简单的，在我的vps上跑着一个docker，docker类似于一个虚拟机，创建了一个容器，里面跑着discourse需要的环境。代码存放在<code>/var/www/discourse</code>下，但是因为是用官方的安装方法安装的，只能等官方的更新，如果我们要自定义怎么办呢？那就需要改git的配置了。</p>

<p>我在github上面fork了官方的仓库，把这个自己的仓库拷贝到本地，改了一些简单的文件，提交，这时候我去官方仓库看，发现他们竟然领先我好多个版本，那就 把他们的改动也拿过来吧，这里需要添加官方仓库的配置，使用<code>git remote add upstream git://github.com/discourse/discourse.git</code>，这时候会发现在<code>.git/config</code>里面多了一个remote的配置，如果需要把这个upstream的改动也合并到自己的仓库，就要<code>git fetch upstream</code>，等改动都更新下来了之后会存放在<code>.git</code>目录下，这时候代码还没有变化。如果执行<code>git pull upstream master</code>，就能把版本库中的版本检出到主分支了。然后执行<code>git push origin master</code>就能把本地的版本更新到github了。</p>

<p>我想把改动也更新到vps上，那就需要改vps上git仓库的配置了。</p>

<ol>
<li><p><code>cd /var/discourse/</code>
切换到docker配置所在的目录</p></li>
<li><p><code>./launcher ssh app</code>
因为我当初初始化配置的时候用的是app来作为container的名字，所以要加上app参数</p></li>
<li><p><code>cd /var/www/discourse/</code></p></li>
<li><p><code>git remote add develop git://github.com/xcaptain/discourse.git</code>
这样就把我的github仓库中的版本作为开发版加入到线上的配置了。</p></li>
<li><p><code>git pull develop master</code>
 就能把我的版本拿下来了，因为我的这个版本都会现在本地开发环境测试过之后再上，所以是很安全的</p></li>
</ol>


<p>这样应该也算是和一大伙志愿者协同开发吧，虽然我没有提交pull request，但是我一直在用别人的免费的代码，真是惭愧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[调试shadowsocks]]></title>
    <link href="http://blog.iyue.club/blog/2015/01/04/debug-shadowsocks/"/>
    <updated>2015-01-04T07:16:58+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/01/04/debug-shadowsocks</id>
    <content type="html"><![CDATA[<p>昨天把在东京的虚拟机搬到加州去了，感觉这次搬家还是很值得的，传输稳定了很多，原来在东京的时候看个youtube经常卡，但是现在看youtube很流畅，不过每月多给2美元，让我帐号里的钱花得更快了。原来装的是freebsd10的系统，现在我把系统换成ubuntu14.04了，因为bsd的软件还是比较老的，而ubuntu就新多了，而且docker和container等都得在linux才能跑。</p>

<p>系统安装完之后肯定是要部署shadowsocks的，操作很简单就不多说了，一点问题都没有，但是今天早上起床开机就发现没法翻墙了，这时候问题就出现了，耽误我一整天时间。</p>

<p>笔记本没法翻墙是什么问题呢？试了一下手机，用fqrouter是没问题的，那就说明服务器端是没问题的，好吧，在客户端上找原因。</p>

<p>之前安装的客户端是nodejs版的，一直都这么用感觉没什么问题，现在我就打算换个客户端版本，试试python的。安装也很简单，但是就是上不了网，真是郁闷。没办法了，慢慢来调试找问题吧。我在服务器端和客户端都开启了-v参数，用来详细输出日志。</p>

<ol>
<li><p>用fqrouter访问的时候，服务器端输出：
 <pre>
 2015-01-03 08:48:07 INFO: accept a connection.
 2015-01-03 08:48:07 INFO: connect to: 106.162.216.94:443
 2015-01-03 08:48:07 INFO: asyncns resolved.
 2015-01-03 08:48:07 INFO: remote connected.
 </pre>
 看来这是正常连接，返回数据也正常。</p></li>
<li><p>本地用firefox访问google，服务器端输出：
 <pre>
 2015-01-03 08:49:56 INFO: accept a connection.
 2015-01-03 08:49:56 INFO: connect to: plus.google.com:443
 2015-01-03 08:50:16 INFO: asyncns resolved.
 2015-01-03 08:50:16 ERROR: getaddrinfo: Operation now in progress
 2015-01-03 08:50:16 INFO: current server connection: 2
 </pre>
 这就是失败的连接在服务器的日志了，只看到一行错误，搞不懂原因。</p></li>
<li><p>在服务器端执行<code>netstat -naltp | grep 8388</code>的输出：
 <pre>
 tcp        0      0 111.222.231.123:8388    0.0.0.0:*               LISTEN      1738/ss-server
 tcp        0      0 111.222.231.123:8388    152.42.49.117:29403     ESTABLISHED 1738/ss-server
 tcp        0      0 111.222.231.123:8388    152.42.49.117:29406     ESTABLISHED 1738/ss-server
 tcp        0      0 111.222.231.123:8388    152.42.49.117:29402     TIME_WAIT   -
 tcp        0      0 111.222.231.123:8388    152.42.49.117:29400     TIME_WAIT   -
 tcp        0      0 111.222.231.123:8388    152.42.49.117:29401     TIME_WAIT   -
 </pre>
 本地可以连接服务器的端口，那为什么没有数据返回呢？</p></li>
<li><p>在本地执行<code>netstat -naltp | grep 1080</code>的输出：
 <pre>
 tcp        0      0 127.0.0.1:1080          0.0.0.0:*               LISTEN      732/python
 tcp        0      0 127.0.0.1:45312         127.0.0.1:1080          ESTABLISHED 744/firefox
 tcp        0      0 127.0.0.1:1080          127.0.0.1:45312         ESTABLISHED 732/python
 tcp        0      0 127.0.0.1:1080          127.0.0.1:45307         TIME_WAIT   -
 tcp        0      0 127.0.0.1:1080          127.0.0.1:45309         TIME_WAIT   -
 </pre>
 看来浏览器和本地端口之间也是通的。</p></li>
</ol>


<p>本地应用可以连接本地的端口，本地的端口可以连接服务器，为什么就是没有数据呢？不会调试web程序，不会抓包，这时候只能乱猜原因，一下午都没有想通问题，就在我想要发帖求助的时候，想了一下为什么用fqrouter的时候服务器端接收到的是一个ip，而本地客户端连接服务器的时候就是一个域名，也许dns出问题了，试了一下<code>ping www.google.com</code>，果然不通，问题找到了，虚拟机提供商这个机房的dns昨晚出问题了，导致解析失败，添加一个第三方的dns，问题解决。</p>

<p><code>vi /etc/resolvconf/resolv.conf.d/base</code>添加下面2行</p>

<pre>
nameserver 8.8.8.8
nameserver 8.8.4.4
</pre>


<p>然后执行<code>resolvconf -u</code>刷新dns，这样就能使用google的dns了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[部署邮件服务]]></title>
    <link href="http://blog.iyue.club/blog/2015/01/03/deploy-email-service/"/>
    <updated>2015-01-03T08:43:43+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/01/03/deploy-email-service</id>
    <content type="html"><![CDATA[<p>今天打算研究一下搭建自己的mail server用来收发邮件，不过后来发现在自己服务器上部署邮件服务太麻烦了，没有那么高性能的服务器，而且额外开放的服务可能会被黑客利用，那么就采用第三方的邮件服务吧。</p>

<h4>首先确定一下发件服务。</h4>

<p>根据网上的推荐，我用的是<a href="https://mandrillapp.com/">mandril</a>，这家公司为免费帐号提供每月发12000封邮件，对于个人玩来说足够了。接下来就是注册帐号，注册完成之后会有一个向导引导着去配置发件服务。填好之后配置都会出现在<a href="https://mandrillapp.com/settings">这里</a>，这些配置包括发件服务器的域名，端口，smtp用户名，以及密码，密码是网站生成的，要好好保存。</p>

<h4>然后就是配置收件服务</h4>

<p>同样也是根据网上的推荐，收件服务用的是国内一家公司的，叫做<a href="https://www.zoho.com/">zoho</a>，这家公司为每个免费帐号提供一个代收域名，15个免费邮箱，每个免费邮箱提供5G存储空间，对于个人玩来说也是足够了的，因为可以把邮件下载到本地，然后删除服务器上的邮件存档，所以这5G的空间可以永远也用不完。好像这家公司就在中关村，真想去参观一下。用zoho的原因是它提供邮件代收服务，我有一个域名<code>joxy.org</code>，我想注册一些邮箱以<code>@joxy.org</code>结尾，zoho就提供这种功能。过程也是很简单，需要先去注册帐号，注册帐号的时候要验证你是否对这个域名有所有权，所以还需要去<a href="https://mya.godaddy.com/">godaddy</a>上面验证一下，我是通过cname的形式来验证的。注册完成之后还得配置一下godaddy，因为在注册域名的时候默认设置了2个收件商，现在我不想用那2个厂商的收件服务了，所以要改改dns设置，找到mx这条配置，删掉额外的2个厂商的配置，然后加上一条mx记录，Host是@,表示joxy.org自身，Points to填mx2.zohomail.com，剩下的随便填就行了。这样当有人往<code>user@joxy.org</code>发邮件的时候，发件服务器通过dns查询的时候就知道要发给zoho，zoho就可以帮忙代收。</p>

<h4>发件服务和收件服务都配置好了，接下来就是测试一下是否能收发邮件了。</h4>

<p>用thunderbird可以很方便的写邮件收邮件。把我刚刚创建的xiefei@joxy.org这个帐号创建了，手动配置好这个帐号发送邮件和接收邮件的设置，就可以开始测试了。在配置smtp发件的时候需要输入密码验证用户是否有权限来发邮件，所以一定要记得填smtp的密码。我测试了一下和我的gamil邮箱互发邮件，一点问题都没有，而且邮件也没有进入垃圾箱。这真是太好了，图形界面的客户端可以收发邮件，真想看看通过php,ruby脚本能不能发邮件。</p>

<p>以上的配置参考了youtube上的<a href="https://www.youtube.com/watch?v=ndIflJOGSww">一个视频</a>，真感谢作者分享这么好的东西，省去了我翻资料学习的过程。</p>

<p>刚刚测试discourse的时候已经把邮件功能加上了，可以发送，真是神奇啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决pacman依赖关系破裂问题]]></title>
    <link href="http://blog.iyue.club/blog/2015/01/01/arch-pacman-broken/"/>
    <updated>2015-01-01T19:35:23+08:00</updated>
    <id>http://blog.iyue.club/blog/2015/01/01/arch-pacman-broken</id>
    <content type="html"><![CDATA[<p>今天准备更新一下系统，执行<code>sudo pacman -Syu</code>的时候，竟然没法同步软件源了，报告说依赖错误。</p>

<pre>
packagekit: requires pacman<4.2.0
package-query: requires pacman<4.2.0
</pre>


<p>但是我查看了一下pacman的版本,<code>pacman --version</code>发现是4.1的满足需求啊，为什么会有这样的提示呢？我想用<code>sudo pacman -S pacman</code>重装pacman也不行，真是费解，这么重要的软件可千万不能出错啊。后来上网搜了一下，发现有人也遇到这种情况，都是直接<code>sudo pacman -R packagekit python-packagekit yaourt package-query</code>，然后再<code>sudo pacman-db-upgrade</code>升级一下数据库，然后再<code>sudo pacman -Syu</code>，ok问题解决。</p>

<p>还有一点是关于virtualbox的，今天我又用了一下vagrant，发现每次<code>vagrant up</code>都会提示：</p>

<pre>
VirtualBox is complaining that the kernel module is not loaded. Please
run `VBoxManage --version` or open the VirtualBox GUI to see the error
message which should contain instructions on how to fix this error.
</pre>


<p>用最简单的方法<code>sudo modprobe vboxdrv</code>然后<code>lsmod | grep vbox</code>发现加载进了</p>

<pre>
vboxdrv               348377  3 vboxnetadp,vboxnetflt,vboxpci`
</pre>


<p>但是这时候还是会报错说找不到网卡驱动，后来我执行<code>sudo vboxreload</code>显示：</p>

<pre>
vboxpci                23139  0
vboxnetflt             27412  0
vboxnetadp             25443  0
vboxdrv               348377  3 vboxnetadp,vboxnetflt,vboxpci
</pre>


<p>这时候才算是真正的把所有的驱动都加进来了。</p>
]]></content>
  </entry>
  
</feed>
