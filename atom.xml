<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Joey's Blog]]></title>
  <link href="http://xcaptain.github.io/atom.xml" rel="self"/>
  <link href="http://xcaptain.github.io/"/>
  <updated>2014-10-25T23:31:28+00:00</updated>
  <id>http://xcaptain.github.io/</id>
  <author>
    <name><![CDATA[joey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learn-haskell-1]]></title>
    <link href="http://xcaptain.github.io/blog/2014/10/25/learn-haskell-1/"/>
    <updated>2014-10-25T22:15:29+00:00</updated>
    <id>http://xcaptain.github.io/blog/2014/10/25/learn-haskell-1</id>
    <content type="html"><![CDATA[<p>上周去国图还书的时候无意中看到了一本讲haskell的书，就顺手借回来了。想想第一次听说haskell这个名字还是从王垠的博客里看到的，那时候听他在博客里讲惰性求值，列表解析，lambda函数啊，什么的，根本听不懂。不过到现在为止，深入学习了python，对于列表解析，lambda函数还算是有一个浅浅的了解。而且已经学习过scheme和sml了，虽然都没有花太多时间去学习它们，但是至少对函数式编程了解了一个大概。</p>

<p>以我目前对于函数式编程的理解来说，主要就是一切都是函数，数据是函数，函数也是函数。一个变量只有一个值，不能通过赋值来改变一个变量的值，只能让它重新绑定到另外一个值，所以变量的状态不会改变，不会出现副作用。这些都是一些很粗浅的理解，毕竟没有正儿八经的研究过函数式编程。主要有一个原因就是现在用函数式语言来开发的项目不多，我们学习编程主要还是用来解决实际问题，如果这门语言现实中没什么人用，或者是没法用到，那么学习它的激情就不会太高，虽然说学习过之后可能会提升编程思维。目前我了解的比较有名的函数式语言开发的项目有emacs，这个是用elisp语言来开发的一个编辑器，很强大。texmacs，一个所见即所得的tex编辑器，用的是scheme开发的。guile，gnu世界中的一个lisp编译器，能把lisp代码编译为c语言代码。chicken scheme，又一个scheme的编译器，按照官网说的它编译机器码的效率也是很高的，而且好像第三方库也比较多。lisp族就这些了，而sml族就没有听说过什么大的项目，不得不说很令人沮丧。相比现在流行的c/c++,java,perl/python/php等语言，函数式语言处于一个很小众的地位。为什么这种语言这么强大但是却没什么发展呢？真是搞不懂。</p>

<p>后面开始去搜索haskell的相关信息，发现在80年代的时候一伙科学家发现函数式语言类别太多了，各种lisp变种太多，都有自己的优点，于是这伙人就想要一统函数式语言的天下，他们组建了一个小团体来研究未来的函数式语言。不得不说，开发这事就是得有很多人参与，没什么人参与的项目肯定不会发展的太好，linux的发展是这样，python是这样，都是有一个很大的志愿者团体来维护的，而像freebsd和scheme这样的东西则是在各个很牛逼的大学小范围流传。</p>

<p>haskell算是一个严格类型的语言，也就是说每个变量都有一个类型，数字和字符串之间不能直接操作。目前python和php代码写多了导致我不是很喜欢这个特性，每个变量都有一个类型，多麻烦，数字和字符串之间不能强制转换，不能比较，不能拼接，诸多不便。即使是scheme也不是强类型的，把一个数字添加到一个列表后面在scheme里面是很正常的。sml在这点和haskell差不多，不过sml比haskell更加严格，在定义函数的时候得写明函数接收哪些类型的参数。</p>

<p>不过强类型语言也有一个优点就是执行效率高，在编译过程中执行类型检测，发现问题直接报告异常然后退出，而不是在运行时报告异常。而且强类型语言生成的代码跑起来的时候需要更少的内存。</p>

<p>haskell有自己的编译器，似乎种类有好几种，我在archlinux上用的是ghc，这个编辑器自带了一个解释器叫做ghci，安装好之后在终端输入ghci就能进入解释器，一行一行的执行输入的表达式了。python，php，ruby，scheme，sml都有自己的解释器，能够对每一个表达式求值，真方便。我最讨厌要编译机器码的语言了。</p>

<p>haskell有多种内置的类型，我现在接触了数字，字符串，列表，元组这4个类型。要定义一个变量也很简单，直接<code>let a = 1</code>这样就定义了一个变量a，它绑定了一个数字1,当然我们也可以理解为这行代码定义了一个函数，当执行这个函数的时候会返回一个数字1,在这里函数也变成普通变量了。</p>

<p>字符串是用双引号引起来的，<code>let s = "hello"</code> 就生成了一个字符串变量s，是把它当作函数还是当作普通变量就看个人喜好了。如果要获得某个字符串中间的一个字符，可以使用<code>!!</code>操作符，比如说<code>"hello" !! 2</code> 会返回一个&#8217;l&#8217;，看惯了c数组风格的字符串索引再来看haskell的形式，真是不习惯。</p>

<p>列表是函数式语言的最重要的数据结构，从50年代麦卡锡发明的表处理语言开始，在各个函数式语言里都可以看到列表的各种表现形式。scheme的car和cdr，sml的hd和tl，而在haskell里面则是head和tail。定义一个列表<code>let l = [1,2,3,4]</code>，<code>head l</code>返回列表第一个元素，<code>tail l</code>返回列表除了第一个元素外剩下的元素，<code>init l</code>返回列表除了最后一个元素外的所有元素，<code>last l</code>返回最后一个元素。剩下的还有maximum, minimum, reverse, length, null, take, drop, sum, product, elem等方法，看得眼花缭乱啊，至于为一个这么基本的数据结构写这么多方法吗？ 对于列表还有一个很重要的特性就是可以生成一个列表范围，如果一个集合的元素是可以用很清晰的语言枚举出来的话那么这个集合可以用列表表示出来，比如说如果要生成1到100的所有整数，那么只要<code>[1 .. 100]</code>就可以了，如果要确定步长的话只要枚举前2个元素就好了<code>[1, 3 .. 100]</code>这样就生成了1到100的所有奇数。那么能不能生成[1,2,4,8 &hellip;]这样的变步长的列表呢？很遗憾，haskell没有把这种列表写入最基本的列表方法里面，也很好理解，对于变步长的列表给出了前几个元素不是很好推测下一个元素，如果不清楚它那么就不能实现它，写程序的至理名言。</p>

<p>接下来就涉及到列表解析了，它对应数学里面一个很重要的概念&ndash;集合，<code>{x | x &lt; 10，x是正整数}</code>这是一个很简单的集合，在haskell里面就是<code>[1 .. 9]</code>。如果集合是<code>{x | x &lt; 10，x是偶数}</code>，在haskell里面就是<code>[x | x &lt;- [1 .. 9], x `mod` 2 == 0]</code>，这就是很简单的列表解析了。</p>

<p>元组和列表差不多，不过限制比较松散，列表要求所有的元素都是同一个类型的，而元组没有这个限制<code>(1, 2, "hello")</code>这样就建立了一个三个元素的元组，</p>

<p>haskell是一门很有前景的语言，得好好学学，希望能够坚持每天学点haskell，每天积累一点新知识。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再来记录一次紧急情况]]></title>
    <link href="http://xcaptain.github.io/blog/2014/10/18/emergency-case-1/"/>
    <updated>2014-10-18T11:48:41+00:00</updated>
    <id>http://xcaptain.github.io/blog/2014/10/18/emergency-case-1</id>
    <content type="html"><![CDATA[<p>昨晚12点多的时候突然被从被窝里拉出来了，虽然不再睡觉，但是这种感觉也是很不爽的，就因为我负责的一个网站首页出现500错误，提示数据库不能连接了。
妈呀，这么大的事，怎么还能安心玩手机，赶紧起来查找原因。</p>

<p>目前我这个站是搭建在2台服务器上的，用这2台机器来做负载均衡，跑了3个多月了，一点事都没有， 怎么会突然连不上数据库呢。查看了一下配置，这个站连接着
2个mysql，不是主从，而是业务分开的2个数据库，因为要把2块不太相关的内容整合在一起，通过vpn连接上公司的内网，ssh上服务器尝试连接数据库，第一个数据库
连接正常，但是尝试连接第二个数据库的时候就出现连接错误了，服务器拒绝连接了。很显然，要么这个数据库所在的服务器宕机了，要么就是这个数据库的请求数太多了，
为了避免宕机，数据库自动进入一种保护机制，拒绝所有后来的连接。</p>

<p>尝试这ping了一下服务器，没有宕机，还好，看来就是一个db出问题了，这个db之前也出过问题，当时运维是更改了配置，增加了数据库的最大连接数上限，不过这么晚的时候
找运维也不好找，人家也不愿意大半夜从床上跑起来给你改服务器配置。那么没办法了，只能改代码了。只能把所有涉及到第二个数据库的代码都删了，这样还有一线生机。</p>

<p>因为我的站点结构比较简单，内容只包括视频和文章，视频来自一个数据库，文章来自另一个数据库，只要把文章都干掉就ok，还好文章也不多，而且在页面上结构挺分离的，
还算比较好弄，在配置里面删除第二个数据库的配置，在控制器里删除调用了第二个数据库的方法，在页面上删除文章所在的div，然后刷新页面，ok好了。</p>

<p>真是惊险刺激啊，要是我没有vpn的话这个站就得挂一晚上，要是文章和视频的耦合度太高的话我也束手无策，要是前端设计的页面太复杂的话也会给我的改动带来很多麻烦。还好
这些假设都不存在。感谢Yii框架，大爱。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connect-to-vpn]]></title>
    <link href="http://xcaptain.github.io/blog/2014/09/28/connect-to-vpn/"/>
    <updated>2014-09-28T16:02:00+00:00</updated>
    <id>http://xcaptain.github.io/blog/2014/09/28/connect-to-vpn</id>
    <content type="html"><![CDATA[<p>今天拿到vpn了，真是兴奋啊，早在实习结束的时候就要求了vpn，结果5个月后才拿到手，真是的。
拿到了vpn意味着以后可以早点下班，有事情在家里远程办公还是无休止的工作，休息即工作呢？
希望我不会把工作和生活混乱了。</p>

<p>拿到的vpn就3条信息，一个服务器ip，帐号，密码。也不说一下vpn服务器是用什么软件部署的，这让我怎么
挑客户端软件来连接呢？万一服务器和客户端所用的协议不一样我不是浪费时间吗。算了，都已经这么晚了
还是先随便试一个吧，如果有问题明天到了公司再说。</p>

<p>首先试的是pptp的客户端，因为这是使用最广泛的vpn协议了，虽然之前好像看到过这种通信的加密很弱，但是
没关系，又不发表反动言论。</p>

<p>首先要安装pptp的客户端，很简单，<code>sudo pacman -S pptpclient</code>。</p>

<p>然后需要配置一下vpn连接的参数，比如说服务器ip多少，帐号密码多少。最麻烦的方法莫过于手动改写配置文件了，但是
还好pptp自带了一个setup的功能，一条命令就可以创建vpn连接。
<code>pptpsetup --create my_tunnel --server vpn.example.com --username alice --password foo --encrypt</code>
把my_tunnel替换成一个隧道别名，以后就可以使用这个别名来连接指定的vpn服务器了。
在&ndash;server参数后改为需要连接的ip地址，作为公司内部访问才不会为vpn服务配置一个域名呢，又不是给外人开放使用，没必要好记。
在&ndash;username参数后面输入分配的用户名
然后回车执行这条命令就会提示输入密码，输入密码，ok如果没问题的话现在已经创建好了一个vpn连接，接下来需要做的就是启用这个连接。</p>

<p>直接<code>pon my_tunnel</code>就可以开启这个vpn连接了，然后输入<code>ifconfig</code>查看一下，如果出现了ppp0这个接口那就说明连接建立成功。</p>

<p>这时候试图访问公司内网，可是还是连接不上去，因为没有配置路由规则，默认情况下流量都走wlp3s0这个接口了，这是我的无线网卡的接口。
稍微配置一下公司服务器网段就行了，内部测试机是192.168.10.0/24的网段，所以在命令行输入<code>ip route add 192.168.10.0/24 dev ppp0</code>
然后就可以在本地通过ssh连接这个网段的机器了。</p>

<p>昨晚遇到一个紧急情况，又用了一下vpn，不知道为什么可以连接，也可以执行一些简单的命令，比如cd，ls，svn之类的，就是不能执行vim, cat这类命令，一查看某个文件
连接就会卡死，不得不在本地kill掉这个ssh会话，kill掉之后ppp0这个接口也自动关闭了，又得重新开一遍。不知道是什么原因。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的xmonad配置]]></title>
    <link href="http://xcaptain.github.io/blog/2014/09/08/my-xmonad-config/"/>
    <updated>2014-09-08T04:12:48+00:00</updated>
    <id>http://xcaptain.github.io/blog/2014/09/08/my-xmonad-config</id>
    <content type="html"><![CDATA[<p>xmonad是用haskell写的一个窗口管理器。所谓的窗口管理器和桌面环境最大的区别大概就是轻量和重量的区别吧。
之前用过gnome3, unity, kde4, xfce4等桌面环境，感觉功能和配置都差不多，而且额外安装了太多不必要的东西，
而且还很耗费系统资源。上个月在tumblr看到了某个人的xmonad桌面截图，感觉特别cool，所以开始折腾xmonad，不过
刚开始接触这种窗口管理器还是比较费劲的。</p>

<p>首先得安装xmonad，我现在用的是archlinux64位版本。可以用<code>sudo pacman -S xmonad</code>，安装好了可以执行<code>xmonad --version</code>
看看版本，我的事0.11的版本。每次启动xmonad的时候都会从<code>~/.xmonad/</code>里面读取配置，所以安装完了之后还得检查一下
是否自动生成了这个目录，一般安装成功之后都会出现的。</p>

<p>然后就是配置桌面管理器了，因为我之前用的是gnome3的桌面环境，所以默认使用的桌面管理器是gdm，我如果要在登陆的时候
选择进入那个桌面环境就得把这个地方配置好。首先增加一条xmonad的入口配置：</p>

<pre>
[Desktop Entry]
Encoding=UTF-8
Type=Application
Name=Xmonad
Comment=Lightweight X11 tiled window manager written in Haskell
Exec=xmonad
Icon=xmonad
Terminal=false
StartupNotify=false
Categories=Application;
</pre>


<p>登出系统，然后在登陆界面就会出现xmonad的选项了。默认登陆进去应该是黑乎乎一片，因为就开启了一个wm，什么应用都没有
开。这时候可以输入<code>Alt Shift Return</code>，如果一切正常的话这个快捷键会打开一个终端。ok，有了终端一切都ok了，可以想做任何
在linux都可以执行的操作，比如说打开pidgin聊天，firefox上网，thunderbird读邮件啊。</p>

<p>不过默认的配置确实不好用，还是得上网搜点优化了的配置，</p>

<pre>
--
-- xmonad example config file.
--
-- A template showing all available configuration hooks,
-- and how to override the defaults in your own xmonad.hs conf file.
--
-- Normally, you'd only override those defaults you care about.
--

import XMonad
import XMonad.Util.Run(spawnPipe)
import Data.Monoid
import System.Exit

import qualified XMonad.StackSet as W
import qualified Data.Map        as M

-- The preferred terminal program, which is used in a binding below and by
-- certain contrib modules.
--
myTerminal      = "roxterm"

-- Whether focus follows the mouse pointer.
myFocusFollowsMouse :: Bool
myFocusFollowsMouse = True

-- Whether clicking on a window to focus also passes the click to the window
myClickJustFocuses :: Bool
myClickJustFocuses = False

-- Width of the window border in pixels.
--
myBorderWidth   = 1

-- modMask lets you specify which modkey you want to use. The default
-- is mod1Mask ("left alt").  You may also consider using mod3Mask
-- ("right alt"), which does not conflict with emacs keybindings. The
-- "windows key" is usually mod4Mask.
--
myModMask       = mod4Mask

-- The default number of workspaces (virtual screens) and their names.
-- By default we use numeric strings, but any string may be used as a
-- workspace name. The number of workspaces is determined by the length
-- of this list.
--
-- A tagging example:
--
-- > workspaces = ["web", "irc", "code" ] ++ map show [4..9]
--
myWorkspaces = ["1:term","2:web","3:code","4:vm","5:media"] ++ map show [6..9]

-- Border colors for unfocused and focused windows, respectively.
--
myNormalBorderColor  = "#7c7c7c"
myFocusedBorderColor = "#ffb6b0"

------------------------------------------------------------------------
-- Key bindings. Add, modify or remove key bindings here.
--
myKeys conf@(XConfig {XMonad.modMask = modm}) = M.fromList $

    -- launch a terminal
    [ ((modm .|. shiftMask, xK_Return), spawn $ XMonad.terminal conf)

    -- launch dmenu
    , ((modm               ,xK_p     ), spawn "dmenu-with-yeganesh")

    -- launch firefox
    , ((modm               ,xK_w     ), spawn "firefox")

    -- lock screen
    , ((modm .|. controlMask, xK_l), spawn "xscreensaver-command -lock")

    -- screenshoot
    , ((modm .|. shiftMask, xK_p), spawn "select-screenshoot")

    -- grab the whole screen
    , ((modm .|. controlMask .|. shiftMask, xK_p), spawn "screenshoot")

    -- close focused window
    , ((modm .|. shiftMask, xK_c     ), kill)

     -- Rotate through the available layout algorithms
    , ((modm,               xK_space ), sendMessage NextLayout)

    --  Reset the layouts on the current workspace to default
    , ((modm .|. shiftMask, xK_space ), setLayout $ XMonad.layoutHook conf)

    -- Resize viewed windows to the correct size
    , ((modm,               xK_n     ), refresh)

    -- Move focus to the next window
    , ((modm,               xK_Tab   ), windows W.focusDown)

    -- Move focus to the next window
    , ((modm,               xK_j     ), windows W.focusDown)

    -- Move focus to the previous window
    , ((modm,               xK_k     ), windows W.focusUp  )

    -- Move focus to the master window
    , ((modm,               xK_m     ), windows W.focusMaster  )

    -- Swap the focused window and the master window
    , ((modm,               xK_Return), windows W.swapMaster)

    -- Swap the focused window with the next window
    , ((modm .|. shiftMask, xK_j     ), windows W.swapDown  )

    -- Swap the focused window with the previous window
    , ((modm .|. shiftMask, xK_k     ), windows W.swapUp    )

    -- Shrink the master area
    , ((modm,               xK_h     ), sendMessage Shrink)

    -- Expand the master area
    , ((modm,               xK_l     ), sendMessage Expand)

    -- Push window back into tiling
    , ((modm,               xK_t     ), withFocused $ windows . W.sink)

    -- Increment the number of windows in the master area
    , ((modm              , xK_comma ), sendMessage (IncMasterN 1))

    -- Deincrement the number of windows in the master area
    , ((modm              , xK_period), sendMessage (IncMasterN (-1)))

    -- Toggle the status bar gap
    -- Use this binding with avoidStruts from Hooks.ManageDocks.
    -- See also the statusBar function from Hooks.DynamicLog.
    --
    -- , ((modm              , xK_b     ), sendMessage ToggleStruts)

    -- Quit xmonad
    , ((modm .|. shiftMask, xK_q     ), io (exitWith ExitSuccess))

    -- Restart xmonad
    , ((modm              , xK_q     ), spawn "xmonad --recompile; xmonad --restart")

    -- Run xmessage with a summary of the default keybindings (useful for beginners)
--    , ((modm .|. shiftMask, xK_slash ), spawn ("echo \"" ++ help ++ "\" | xmessage -file -"))
    ]
    ++

    --
    -- mod-[1..9], Switch to workspace N
    -- mod-shift-[1..9], Move client to workspace N
    --
    [((m .|. modm, k), windows $ f i)
        | (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_9]
        , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]
    ++

    --
    -- mod-{w,e,r}, Switch to physical/Xinerama screens 1, 2, or 3
    -- mod-shift-{w,e,r}, Move client to screen 1, 2, or 3
    --
    [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
        | (key, sc) <- zip [xK_w, xK_e, xK_r] [0..]
        , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]


------------------------------------------------------------------------
-- Mouse bindings: default actions bound to mouse events
--
myMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $

    -- mod-button1, Set the window to floating mode and move by dragging
    [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
                                       >> windows W.shiftMaster))

    -- mod-button2, Raise the window to the top of the stack
    , ((modm, button2), (\w -> focus w >> windows W.shiftMaster))

    -- mod-button3, Set the window to floating mode and resize by dragging
    , ((modm, button3), (\w -> focus w >> mouseResizeWindow w
                                       >> windows W.shiftMaster))

    -- you may also bind events to the mouse scroll wheel (button4 and button5)
    ]

------------------------------------------------------------------------
-- Layouts:

-- You can specify and transform your layouts by modifying these values.
-- If you change layout bindings be sure to use 'mod-shift-space' after
-- restarting (with 'mod-q') to reset your layout state to the new
-- defaults, as xmonad preserves your old layout settings by default.
--
-- The available layouts.  Note that each layout is separated by |||,
-- which denotes layout choice.
--
myLayout = tiled ||| Mirror tiled ||| Full
  where
     -- default tiling algorithm partitions the screen into two panes
     tiled   = Tall nmaster delta ratio

     -- The default number of windows in the master pane
     nmaster = 1

     -- Default proportion of screen occupied by master pane
     ratio   = 1/2

     -- Percent of screen to increment by when resizing panes
     delta   = 3/100


------------------------------------------------------------------------
-- Window rules:

-- Execute arbitrary actions and WindowSet manipulations when managing
-- a new window. You can use this to, for example, always float a
-- particular program, or have a client always appear on a particular
-- workspace.
--
-- To find the property name associated with a program, use
-- > xprop | grep WM_CLASS
-- and click on the client you're interested in.
--
-- To match on the WM_NAME, you can use 'title' in the same way that
-- 'className' and 'resource' are used below.
--
myManageHook = composeAll
    [ className =? "Chromium"       --> doShift "2:web"
    , className =? "Google-chrome"  --> doShift "2:web"
    , className =? "Firefox"        --> doShift "2:web"
    , className =? "Emacs"          --> doShift "3:code"
    , className =? "Gvim"           --> doShift "3:code"
    , className =? "Weechat"        --> doShift "5:media"
    , className =? "Pidgin"         --> doShift "5:media"
    , className =? "ThunderBird"    --> doShift "5:media"
    , resource  =? "desktop_window" --> doIgnore
    , className =? "Galculator"     --> doFloat
    , className =? "Steam"          --> doFloat
    , className =? "Gimp"           --> doFloat
    , resource  =? "gpicview"       --> doFloat
    , className =? "MPlayer"        --> doFloat
    , className =? "VirtualBox"     --> doShift "4:vm"
    , className =? "Xchat"          --> doShift "5:media"
    , className =? "stalonetray"    --> doIgnore]



------------------------------------------------------------------------
-- Event handling

-- * EwmhDesktops users should change this to ewmhDesktopsEventHook
--
-- Defines a custom handler function for X Events. The function should
-- return (All True) if the default handler is to be run afterwards. To
-- combine event hooks use mappend or mconcat from Data.Monoid.
--
myEventHook = mempty

------------------------------------------------------------------------
-- Status bars and logging

-- Perform an arbitrary action on each internal state change or X event.
-- See the 'XMonad.Hooks.DynamicLog' extension for examples.
--
myLogHook = return ()

------------------------------------------------------------------------
-- Startup hook

-- Perform an arbitrary action each time xmonad starts or is restarted
-- with mod-q.  Used by, e.g., XMonad.Layout.PerWorkspace to initialize
-- per-workspace layout choices.
--
-- By default, do nothing.
myStartupHook = return ()

------------------------------------------------------------------------
-- Now run xmonad with all the defaults we set up.

-- Run xmonad with the settings you specify. No need to modify this.
--
main = do
     xmproc <- spawnPipe "xmobar ~/.xmonad/xmobar.hs"
     xmonad $ defaults

-- A structure containing your configuration settings, overriding
-- fields in the default config. Any you don't override, will
-- use the defaults defined in xmonad/XMonad/Config.hs
--
-- No need to modify this.
--
defaults = defaultConfig {
      -- simple stuff
        terminal           = myTerminal,
        focusFollowsMouse  = myFocusFollowsMouse,
        clickJustFocuses   = myClickJustFocuses,
        borderWidth        = myBorderWidth,
        modMask            = myModMask,
        workspaces         = myWorkspaces,
        normalBorderColor  = myNormalBorderColor,
        focusedBorderColor = myFocusedBorderColor,

      -- key bindings
        keys               = myKeys,
        mouseBindings      = myMouseBindings,

      -- hooks, layouts
        layoutHook         = myLayout,
        manageHook         = myManageHook,
        handleEventHook    = myEventHook,
        logHook            = myLogHook,
        startupHook        = myStartupHook
    }
</pre>


<p>这个配置是我结合<code>/usr/share/x86_64-linux-ghc-7.8.3/xmonad-0.11/man/xmonad.hs</code>并且稍微自定义了一些键绑定。
还有一些缺陷，不知道为什么有些功能能够spawn成功，而有些功能则spawn失败。这个问题留待后续解决，因为还得
稍微学点haskell的东西。</p>

<p>过几天还得去公司试验一下多物理显示器下工作情况，如果对于多显示器支持也好的话就可以日常用了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php-array-splice]]></title>
    <link href="http://xcaptain.github.io/blog/2014/09/02/php-array-splice/"/>
    <updated>2014-09-02T14:21:55+00:00</updated>
    <id>http://xcaptain.github.io/blog/2014/09/02/php-array-splice</id>
    <content type="html"><![CDATA[<p>昨天下午接到一个任务是从一堆数据中去掉指定的数据。需求很简单，本来很快就能做完，但是到后来发现了
一个bug让我百思不得其解，今天早上来上班之后突然头脑清醒了把问题发现了。</p>

<p>我的思路是把要过滤的数据都放到一个叫做<code>$filterGames</code>的数组里面，所有的数据存放在<code>$arr</code>这个数组里。
因为要用php实现，没有现成的方法，随便写了一个线性复杂度的算法，挨个检测<code>in_array</code>，然后用<code>array_splice</code>这个
函数来删除元素。本来思路是很简单的，但是就是得不到我要的结果。具体代码如下：
<code>
foreach($arr as $k => $v) {
    if(in_array($v, $filterGames)) {
        array_splice($arr, $k, 1)
    }
}
return $arr;
</code>
结果总是过滤了部分数据但是还有部分不能过滤。</p>

<p>今天发现问题之后我改了一下，用的是<code>unset</code>这个方法。
<code>
foreach($arr as $k => $v) {
    if(in_array($v, $filterGames)) {
        unset($arr[$k]);
    }
}
</code>
本来我应该用array_splice来删除数组元素的，因为这个方法不会在数组中留下一个洞，而unset把元素删了之后会留下一个洞，导致
没法通过数组的key来遍历。至于为什么array_splice只能过滤部分数据而unset可以全部过滤掉也是因为当使用array_splice的时候
删了一个元素后面的元素会往前面挤，导致错过了被删的机会。而unset则是删了一个元素之后就留出了一个洞，整个数组的结构不变。
我觉得php的数组应该是用链表来实现的，在每个节点中有一个字段记录了当前节点相对于首节点的位置，如果用array_splice来删除
节点，会重写每个节点的这个相对位置，而用unset来删除则不会。</p>

<p>不过作为上层应用开发者对于语言的具体实现不必要去研究，只要形象的知道这2种方法的不同就够了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用fish]]></title>
    <link href="http://xcaptain.github.io/blog/2014/08/31/use-fish-shell/"/>
    <updated>2014-08-31T14:43:17+00:00</updated>
    <id>http://xcaptain.github.io/blog/2014/08/31/use-fish-shell</id>
    <content type="html"><![CDATA[<p>从最初安装ubuntu到现在细细数来已经用过很多个Unix like system了，也经历过很多种shell
从linux下标准的bash，到freebsd的tcsh，到补全功能非常强大的zsh，现在尝试了一个新的fish。
这不是鱼，全名叫做(friendly interactive shell)，用户友好的shell，语法高亮功能使得不容易
输错命令，自动补全功能比zsh还强大，能够根据man page里的关键字来补全，也能根据~/.ssh/config来
补全ssh命令，历史记录功能也比bash之类的友好。</p>

<p>fish的项目主页在<a href="https://github.com/fish-shell/fish-shell">这里</a>，可以看到这个项目的还是比较
活跃的。因为我用的是archlinux，所以就没有去从build源代码，而是直接<code>pacman -S fish</code>安装的。</p>

<p>默认的fish已经很强大了:
    1. 内建了命令行语法高亮功能。输入不同的命令会用不同的颜色来显示。
    2. 要查找一个命令的历史记录不要用ctrl-R来找，直接输入这个命令的开头几个字母fish会自动用阴影
    显示上一次执行的这条命令，然后按下ctrl-E或者是右方向键就能全部补齐了，这个功能对于很长的命令
    来说真是太赞了，而且感觉比bash的ctrl-R强大多了。
    3. 自动补全功能非常强大。我在编辑这篇博客的时候不是输入<code>vim 20140-08-31-use-fish-shell.markdown</code>来
    编辑的，而是直接<code>vim fish&lt;Tab&gt;</code>来找到这个文件的，真是强大的功能，这是我目前发现的唯一支持任意
    位置补齐的shell，就算是也很不错的zsh也只支持从头补齐。
    4. 自动命令行纠错。比如说你要执行<code>cd ~/Documents</code>但是输成了<code>cd ~/documents</code>也没有关系，直接就自动
    纠错了。有了它真是方便。</p>

<p>虽然默认的fish很不错，但是我还是从github上clone了<a href="https://github.com/bpinto/oh-my-fish">oh-my-fish</a>这个项目,
这个项目和<a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a>的结构很像，里面的配置都很有用，而且有多种
主题，当对目前这个主题审美疲劳了，换一个主题还是很不错的。使用oh-my-fish来作为fish的配置也很简单，按照github
上面的操作一步一步做就是了。</p>

<p>接下来就是根据自己的喜好自定义fish的theme了，要加载哪个theme只要改<code>~/.config/fish/config.fish</code>就ok，找到
<code>set fish_theme</code>这一行，填入你要的theme就行了，我用的是<code>set fish_theme zish</code>，这个主题挺漂亮的。</p>

<p>然后就是自定义一些别名了，fish没有alias这个命令，但是可以用函数来实现自定义别名。既然使用了oh-my-fish的配置
就得按照它的结构来修改。在<code>~/.oh-my-fish/functions/</code>里面放的都是自定义的函数。我先给vi起了个别名vim，因为
有了vim谁还用vi啊。在这个目录下建一个文件vi.fish。
<code>
function vi &ndash;description ‘alias of vim’
    vim
end
</code>
保存退出，然后在命令行输入vi，这时候打开的就是vim了，连重新打开一个shell都不用就生效了，真是好快啊。</p>

<p>接下来就是一些关于fish的shell编程方面的问题了。不过这块没有怎么认真去看。工作中用的都是bash，谁会为了执行
一个脚本而额外安装fish。不过我还是很喜欢fish的语法的，感觉和python和ruby很像，相比之下bash的语法就有点
另类和老古董了。等以后要用到fish script的时候再去认真研究一下fish syntax。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize Keyboard Layout]]></title>
    <link href="http://xcaptain.github.io/blog/2014/08/25/customize-keyboard-layout/"/>
    <updated>2014-08-25T15:32:42+00:00</updated>
    <id>http://xcaptain.github.io/blog/2014/08/25/customize-keyboard-layout</id>
    <content type="html"><![CDATA[<p>星期天膜拜了一位大牛，真是佩服他啊。</p>

<p>公司的一个统计功能出问题了，一直都没有把它修复，因为是历史遗留问题，找不到根源，所以
后来公司领导决定把原来这个功能的开发者找回来看看到底是出什么问题了。所以星期天我也来
公司看了一下大牛如何解决问题。</p>

<p>因为数据是前端通过访问一个php的接口写入redis得到的，所以大牛一直在调试redis。读取redis
数据的代码是用python写的。用emacs编辑这个python文件，在旁边开着1个终端使劲调。不得不说
他是我见过的emacs用得最好的一个了，我自己从大二开始接触linux开始就一直在vim和emacs之间
切换着写代码，对emacs也算不陌生，但是我就不能一只手写代码。而且使用emacs对我来说真是煎熬，
因为ctrl键太远了，要用小拇指按住这个键真是太吃力了。不过后来发现他时而使用左半部分手掌
压住ctrl键，时而使用右侧的ctrl键，所以都没有见到他的手大幅度移动但是就按出了很多键。</p>

<p>emacs是用来编辑查看代码的，要监控程序还得通过终端输入命令行来操作。大牛只登陆了一个终端，
但是确打开了很多个窗口，后来才发现他是用tmux来虚拟化多个窗口的，说道这个又伤心了一下，最初
刚来公司的时候我不会用xshell，所以用的是putty来远程登陆服务器写代码，那时候就曾经接触过
一段时间tmux，因为putty实在是不好新建窗口，太麻烦。如果那时候一直用着tmux到现在我说不定也
很熟练了，不过后来办公彻底有windows转移到linux之后就更没有去接触tmux了，因为在linux终端
新建一个连接更容易，ctrl+shift+t就行了。不得不说tmux真是个好东西，省去了多次登陆的麻烦，
虚拟多个窗口，可以按照你想要的方式排列窗口，对于监控某个程序来说真是再合适不过了，下面的
窗口运行程序，上面的窗口输出运行结果。</p>

<p>还发现一个很好用的工具，watch，这个命令是用来监控某个命令的输出的，如果某个程序持续输出
了内容，拿它来监控再合适不过了，不然就得反复输命令查看结果了。</p>

<p>被感染了，我也要学习使用emacs，也要学习使用tmux和各种命令行，不能止步于已经掌握的内容，今晚
折腾了一下emacs，改了一个键盘映射，把恼人的ctrl键和caplock键换了个位置。因为我现在用的系统
是archlinux+gnome3.12，所以直接调用一个系统设置改的，找到tweak tool然后在typing里面选择
swap ctrl and caplock,然后就ok了，新的键盘不是很习惯，慢慢来，现在ctrl靠近键盘中间了以后
使用emacs写代码应该是更方便了吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ssh-login-without-password]]></title>
    <link href="http://xcaptain.github.io/blog/2014/08/21/ssh-login-without-password/"/>
    <updated>2014-08-21T15:50:42+00:00</updated>
    <id>http://xcaptain.github.io/blog/2014/08/21/ssh-login-without-password</id>
    <content type="html"><![CDATA[<p>今天又拿到了一台服务器的权限，才来到这个公司没多久现在算一下已经拿到很多机器的权限了，本地测试机有3台，都拥有root权限，
线上服务器有5台，有部分root权限。刚开始用xshell登陆服务器还没什么觉得不方便的，但是现在我已经完全使用linux办公了，所以
只能用terminal来ssh连接服务器。手动输入密码太麻烦了，而且还是经常性的输密码。</p>

<p>今天又花了点时间看了一下公钥加密的过程这块，了解了一个ssh连接的基本流程。ssh登陆有2种方法：</p>

<ol>
<li>基于密码的验证。</li>
<li>基于公钥私钥的验证。</li>
</ol>


<p>基于密码的验证很好理解，当连接服务器的时候会提示你输入密码，等验证通过之后就能连接远程服务器了。这种方法很好理解，但是其实
局限性是很大的，首先麻烦，每次登陆都得输密码，而一个安全的密码又不是那么好记。其次密码被暴露的次数越多就越不安全，万一哪一次
在输入密码的时候被中间人给截获了这个密码，那么就没有丝毫秘密可言了。</p>

<p>而基于公钥私钥的验证相比起来就安全多了，在服务器中保存一份你自己的公钥，服务器就会知道你是授权了的用户，客户端连接服务器的时候
会检查这个用户的公钥是否在授权了的公钥列表中，如果在的话就放行，允许登陆。登陆之后加密的方法就很简单了，服务器用客户端的公钥加密信息
后传给客户端，客户端收到这个加密的信息之后用自己的私钥解密。然后客户端给服务器发送信息，用服务器的公钥加密，服务器收到之后拿自己的
私钥解密。</p>

<p>所以总的来说ssh连接就是2步，一步是验证身份，剩下的就是交换公钥的加密数据传输。</p>

<p>因为我现在都是使用运维给我分配的帐号密码来登陆服务器，每次连接都得输入密码很不方便，所以我还是改为通过公钥来验证身份好了。</p>

<p>首先给自己生成一个公钥私钥对，使用<code>ssh-keygen</code>生成公钥和私钥对，一般的命名规则是id_rsa和id_rsa.pub， 默认使用的加密方法是rsa，
默认使用2048字节的私钥。然后就是把自己的公钥添加到服务器上，保存在<code>~/.ssh/authorized_keys</code>里面。具体实现方法有很多，可以直接复制粘贴进去，
可以把公钥文件传到服务器上，也可以用一个简单的命令<code>ssh-copy-id</code>,这样就可以绕过手动输入密码了。</p>

<p>真是搞不懂，运维们有这么好的方法不用为什么要给一个账户创建密码呢，直接向我要一个公钥，然后加到服务器就行了嘛。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Freebsd-basic-operations]]></title>
    <link href="http://xcaptain.github.io/blog/2014/08/16/freebsd-basic-operations/"/>
    <updated>2014-08-16T14:04:13+00:00</updated>
    <id>http://xcaptain.github.io/blog/2014/08/16/freebsd-basic-operations</id>
    <content type="html"><![CDATA[<p>上周买了一年的vps，一直没怎么折腾，今天环境稍微配置了一下，其实基本的软件安装都是
很简单的，每个成熟的系统都有它自己的包管理器。我用类unix系统也不久，接触过的包管理
方式有debian/ubuntu系的dpkg和apt-get, opensuse的zypper, redhat的yum和arch的pacman
和freebsd的pkg，这这些发行版中我对于debian和arch还是比较熟悉的，freebsd也玩过但是
不是很熟悉它的命令行。</p>

<p>因为被公司的一台freebsd主机给震惊了，持续服务超过900天了，所以我买了vps之后没有
多想就安装了一个freebsd10的系统，因为这台机器硬件配置还是比较低的，只有768M的
内存。</p>

<p>首先安装nginx服务器，我还是比较习惯二进制安装，要我在服务器上编译nginx的源码
我才没有那个闲功夫呢。
<code>pkg install nginx</code>
这样就把nginx安装上了，如果要启动nginx得执行
<code>sudo /usr/local/etc/rc.d/nginx start</code>
因为我还没有想好在服务器上放什么，所以还没有具体配置nginx和fastcgi应用。</p>

<p>然后安装mariadb,这个没办法了必须得从源码安装，而且还没有办法安装mariadb10,只能
从源码编译5.5的版本。
<code>cd /usr/ports/databases/mariadb55-server</code>
<code>sudo make install clean</code>
编译的过程要很久，真怕生成一大堆临时文件让我可怜的15G固态硬盘受不了。漫长的等待时间过去
了，终于编译完了。默认的mariadb没有设置root的密码，为了明确权限肯定得设置密码。
<code>mysql -u root</code> 连接上数据库服务器之后就开始设置权限了，<code>set password for ‘root’@’localhost’ = password(‘yourpasswd’)</code>
这样就设置好了root的密码。</p>

<p>然后就是给root设置访问的权限了，<code>grant all privileges on *.* to ‘root’@’localhost’ with grant option</code>
这条命令是给root用户通过本地访问所有数据库的所有表的权限，如果我想要远程连接数据库稍微修改一下这条命令
就ok了。<code>grant all privileges on *.* to ‘root’@’%’ with grant option</code>，在mysql中<code>%</code>代表匹配任意字符串，所以
这条命令表示允许root通过任何ip来连接数据库。</p>

<p>本来还打算配置一下php的环境的，但是就我这几个月php开发的经历来看，这门语言实在是不值得花太多精力去学，
消耗巨大的内存，语言设计简陋，前后端分隔明显。我打算在服务器上搭建RoR的环境。</p>

<p>然后就是分配用户了，我新建了一个公共帐号public，操作也很简单<code>adduser</code>然后按照提示一步一步安装就好了，到了
最后还得考虑给这个用户分配权限的问题，我是通过sudo来管理root权限的，但是暂时没打算给这个公共号分配root权限。
后面还涉及到用户资源限制的问题，比如带宽资源，硬盘资源，cpu时间资源和内存资源，这些都是很专业的系统管理员
知识了，暂时没那个精力去学习。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个php分页示例]]></title>
    <link href="http://xcaptain.github.io/blog/2014/08/16/a-php-pagination-example/"/>
    <updated>2014-08-16T09:26:45+00:00</updated>
    <id>http://xcaptain.github.io/blog/2014/08/16/a-php-pagination-example</id>
    <content type="html"><![CDATA[<p>上次做的那个视频站有一个页面被领导否决了，因为之前是使用ajax加载数据的，他们说这种方法
对seo不友好，所以让我重新再写一遍。不得不吐槽这些可恶的领导了，虽然我们只是个小兵，可是
一句话就把我们辛辛苦苦写出来的代码给否决了，怎么说都还是很伤心的。不过伤心归伤心，活
还是的继续干的，谁让我们是给别人打工的呢。</p>

<p>之前的实现方法是用jsonp来做的，我用php写好接口，输出一个回调函数和数据，前端获得这个数据，
然后就能显示出页面了。不过现在要重写只能我自己来处理数据了。</p>

<p>首先遇到一个多级选择的问题，这个问题一点都不是问题，因为既然是反复请求，那么给每一级选项
加上一个参数，然后传给后台就能取出相应的数据了。真正让我比较烦恼的是分页的功能如何实现。</p>

<p>分页貌似简单，实则复杂。如果对于很少的页面当然可以把所有的页码罗列出来，但是如果页面很多，
比如一个分类有100个页面，那么如何显示这100个页面就是个问题了，通常的惯例是显示头几个，当前页
附近几个，和最后几个页面，剩下的用省略号表示。这时候就涉及到一个比较麻烦的问题了，怎么设计
当前的分页结构，使得页面均匀分布。</p>

<p>在网上搜了一段代码，稍微改动了一下加到我的页面中去了，不得不说这段代码的逻辑还是很复杂的，
我甚至都没有仔细去研究为什么要这么做，只是稍微看了一下各种情况对应的代码实现。</p>

<pre>
class BaseFunction {
    /**
     * lol.7k7k.com列表页分页函数
     * 返回一段html代码
     * $page  当前页面号码，如1,2
     * $totalCount: 总共视频数目，根据这个值获得总页数
     * $adjacents:  现实与当前也相邻的几个页面
     * $catname:  分类名，比如zmjs
     * $tagname:   标签名中文
     * $sort: 排序  "/$tagname-$sort-$page/"
     */
    public static function listPager($page, $pageSize, $totalCount, $adjacents, $catname, $tagname, $sort) {
        if($page == 0) $page = 1;                //默认从第一页开始
        $prev = $page - 1;
        $next = $page + 1;
        $lastPage = ceil($totalCount/$pageSize); //最后一页编号
        $lpm1 = $lastPage - 1;                   //倒数第二页编号

        $pagination = '';
        if($lastPage > 1) {
            $pagination .= "<div class=\"pagination\">";
            if($page > 1) {
                $pagination .= "<a href=\"/$catname/$tagname-$sort-$prev/\">上一页</a>";
            } else {
                $pagination .= "<span class=\"disabled\">上一页</span>";
            }
            if($lastPage < 7 + ($adjacents * 2)) { //不需要隐藏额外的页码
                for($counter = 1; $counter <= $lastPage; $counter++) {
                    if($counter == $page) {
                        $pagination .= "<span class=\"curr\">$counter</span>"; //高亮当前页
                    } else {
                        $pagination .= "<a href=\"/$catname/$tagname-$sort-$counter/\">$counter</a>"; //其余页面做成链接
                    }
                } 
            } elseif($lastPage > 5 + ($adjacents * 2)) { //页面很多，要隐藏部分页码
                if($page < 1 + ($adjacents * 2)) {       //靠近前面，隐藏后面的页面
                    for($counter = 1; $counter < 4 + ($adjacents * 2); $counter++) {
                        if($counter == $page) {
                            $pagination .= "<span class=\"curr\">$counter</span>";
                        } else {
                            $pagination .= "<a href=\"/$catname/$tagname-$sort-$counter/\">$counter</a>";
                        }
                    }
                    $pagination .= "...";
                    $pagination .= "<a href=\"/$catname/$tagname-$sort-$lpm1/\">$lpm1</a>";
                    $pagination .= "<a href=\"/$catname/$tagname-$sort-$lastPage/\">$lastPage</a>";
                } elseif($lastPage - ($adjacents * 2) > $page && $page > ($adjacents * 2)) { //在中间，前后都隐藏部分
                    $pagination .= "<a href=\"/$catname/$tagname-$sort-1/\">1</a>";
                    $pagination .= "<a href=\"/$catname/$tagname-$sort-2/\">2</a>";
                    $pagination . "...";
                    for($counter = $page - $adjacents; $counter <= $page + $adjacents; $counter++) {
                        if($counter == $page) {
                            $pagination .= "<span class=\"curr\">$counter</span>";
                        } else {
                            $pagination .= "<a href=\"/$catname/$tagname-$sort-$counter/\">$counter</a>";
                        }
                    }
                } else { //靠近尾部，隐藏前面部分
                    $pagination .= "<a href=\"/$catname/$tagname-$sort-1/\">1</a>";
                    $pagination .= "<a href=\"/$catname/$tagname-$sort-2/\">2</a>";
                    $pagination .= "...";
                    for($counter = $lastPage - (2 + ($adjacents * 2)); $counter <= $lastPage; $counter++) {
                        if($counter == $page) {
                            $pagination .= "<span class=\"/$catname/$tagname-$sort-$counter/\">$counter</span>";
                        } else {
                            $pagination .= "<a href=\"/$catname/$tagname-$sort-$counter/\">$counter</a>";
                        }
                    }
                }
            } //end elseif 对于很长的页面情况判断结束
            if($page < $counter - 1) {
                $pagination .= "<a href=\"/$catname/$tagname-$sort-$next/\">下一页</a>";
            } else {
                $pagination .= "<span class=\"disabled\">下一页</span>";
            }
            $pagination .= "</div>";
            return $pagination;
        } else {  //对于只有一页的情况，也做一个分页
            $pagination .= "<div class=\"pagination\">";
            $pagination .= "<span class=\"disabled\">上一页</span>";
            $pagination .= "<span class=\"curr\">1</span>";
            $pagination .= "<span class=\"disabled\">上一页</span>";
            $pagination .= "</div>";
            return $pagination;
        }
    }
}
</pre>


<p>在我的网站上面试验了一下，基本符合我的要求，不过难怪php和javascript都要做一个分页类，手动实现分页真是太累了。还好有人共享代码，不然自己写有得写了。</p>

<p>OMG,竟然把我代码里的html自动解析了，这让我怎么插入html代码啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jsonp的一点简单看法]]></title>
    <link href="http://xcaptain.github.io/blog/2014/08/12/jsonp-some-thought/"/>
    <updated>2014-08-12T14:28:53+00:00</updated>
    <id>http://xcaptain.github.io/blog/2014/08/12/jsonp-some-thought</id>
    <content type="html"><![CDATA[<h3>jsonp是ajax的异域传输技术</h3>

<p>因为我不懂javascript，更不用说jquery了，所以现在在做的一个需要后台请求的页面只能让前端去做。
昨晚在公司加班和前端对接口，但是到了9点也没有解决掉bug，太失望了，不过今天来了之后和一个大牛
说了一下，他立刻就指出了问题所在。</p>

<p>先简单描述一下我做的这个项目吧。</p>

<p>项目不麻烦，后端用php+yii框架处理好页面间数据流逻辑，前端使用css和js做一些特效。我这边的工作
都做得差不多了，但是有一个分类页涉及到多级选择的问题，最初的设计是一次性从后台取几百个数据出来
但是评估了一下发现这种方法可行性不好，一次加载太多内容对用户的体验不好，而且不能充分读取数据库
的内容。后面和前端商量了一下采用ajax请求的方式，打开一个页面之后只加载进当前页面的内容，剩下
的内容等用户点击相应的链接触发相应的js事件之后以jsonp的方式给服务器发请求，然后服务器把要显示的
内容取出来。</p>

<p>在我看来jsonp就是一个站给出接口，另一个站通过js获得这个接口给的数据。这样就是异域了，最大的好处就是
后端的压力减轻了，之前如果所有的页面都在一个站上，那么所有相关的信息都得后端开发人员想办法从数据库
中取，也就是俗话说的套页面。我是很反感套页面这种工作的，没有一点技术含量，枯燥无聊，但是不可否认，
在phpweb开发中很大一部分时间花在这里了。现在如果php程序员只要给出接口，前端写js获得这个接口的数据，
他们来渲染页面，这样真是大大减轻了后端的压力，节省下来的时间可以上g+上看看新闻，在博客上发发文章，
怎么说前端对于html要比后端熟悉。</p>

<p>前端给出的接口也有要求，最主要的内容就是回调。
<code>
echo $callback . “(“ . $data . “)”;
</code>
在php的代码里加上这个语句，<code>$callback</code>是jquery的回调函数，<code>$data</code>是要传出去的接口数据，一般是一个
json数组的形式。我这个站的$data是由4个参数共同生成的，前端访问接口的时候是通过<code>http://www.example.com/api/?callback=Jquery_function&amp;arg1=1&amp;arg2=2&amp;arg3=3&amp;arg4=4</code>
既然明白请求的形式了，那么很好知道这个接口文件的写法了。</p>

<pre>
$callback = $_GET[‘callback’]; //获得回调函数
$arg1     = $_GET[‘arg1’];
$arg2     = $_GET[‘arg2’];
$arg3     = $_GET[‘arg3’];
$arg4     = $_GET[‘arg4’]; //获得剩下的4个参数
$data     = some_func($arg1, $arg2, $arg3, $arg4); //通过某些函数获得要返回的数据
</pre>


<p>很神奇吧，当你点击一个网页的时候，这个页面不是立刻向后台请求数据，而是通过js从另一个接口文件里拿数据。</p>

<p>我的经验还是很不丰富啊，以后要多学习，不然遇到一点比较新的技术就搞半天太丢脸了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Eye on Octopress]]></title>
    <link href="http://xcaptain.github.io/blog/2014/08/11/first-eye-on-octopress/"/>
    <updated>2014-08-11T15:43:02+00:00</updated>
    <id>http://xcaptain.github.io/blog/2014/08/11/first-eye-on-octopress</id>
    <content type="html"><![CDATA[<h3>第一次使用octopress体验</h3>

<p>这几天突然发现php功能很弱，而python又总是拿来写脚本，没有真正用来开发过什么大型的项目。
为了早日实现全栈工程师的梦想，打算开始学习ruby。</p>

<p>在网上搜了一下ruby开始学习的方法，下载了几本电子书看，然后又发现了octopress这个开源项目，
我一直坚信学习不能单纯看书，所以很不错，看到了这个博客平台，以前在ghost blog上面用过一点
markdown，但是后来vps到期之后就没有继续写markdown了，现在很不熟练。</p>

<p>当初用ghost blog的时候是不太懂前端的东西，但是现在已经和html，js，css打了一个多月交道，
还算熟悉，以后肯定得自己动手改改theme，加点widget等。</p>

<p><a href="http://ruby-doc.org/docs/">ruby programming</a></p>
]]></content>
  </entry>
  
</feed>
