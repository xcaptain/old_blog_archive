<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Joey's Blog]]></title>
  <link href="http://xcaptain.github.io/atom.xml" rel="self"/>
  <link href="http://xcaptain.github.io/"/>
  <updated>2014-08-16T18:04:01+08:00</updated>
  <id>http://xcaptain.github.io/</id>
  <author>
    <name><![CDATA[joey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一个php分页示例]]></title>
    <link href="http://xcaptain.github.io/blog/2014/08/16/a-php-pagination-example/"/>
    <updated>2014-08-16T17:26:45+08:00</updated>
    <id>http://xcaptain.github.io/blog/2014/08/16/a-php-pagination-example</id>
    <content type="html"><![CDATA[<p>上次做的那个视频站有一个页面被领导否决了，因为之前是使用ajax加载数据的，他们说这种方法
对seo不友好，所以让我重新再写一遍。不得不吐槽这些可恶的领导了，虽然我们只是个小兵，可是
一句话就把我们辛辛苦苦写出来的代码给否决了，怎么说都还是很伤心的。不过伤心归伤心，活
还是的继续干的，谁让我们是给别人打工的呢。</p>

<p>之前的实现方法是用jsonp来做的，我用php写好接口，输出一个回调函数和数据，前端获得这个数据，
然后就能显示出页面了。不过现在要重写只能我自己来处理数据了。</p>

<p>首先遇到一个多级选择的问题，这个问题一点都不是问题，因为既然是反复请求，那么给每一级选项
加上一个参数，然后传给后台就能取出相应的数据了。真正让我比较烦恼的是分页的功能如何实现。</p>

<p>分页貌似简单，实则复杂。如果对于很少的页面当然可以把所有的页码罗列出来，但是如果页面很多，
比如一个分类有100个页面，那么如何显示这100个页面就是个问题了，通常的惯例是显示头几个，当前页
附近几个，和最后几个页面，剩下的用省略号表示。这时候就涉及到一个比较麻烦的问题了，怎么设计
当前的分页结构，使得页面均匀分布。</p>

<p>在网上搜了一段代码，稍微改动了一下加到我的页面中去了，不得不说这段代码的逻辑还是很复杂的，
我甚至都没有仔细去研究为什么要这么做，只是稍微看了一下各种情况对应的代码实现。</p>

<pre>
class BaseFunction {
    /**
     * lol.7k7k.com列表页分页函数
     * 返回一段html代码
     * $page  当前页面号码，如1,2
     * $totalCount: 总共视频数目，根据这个值获得总页数
     * $adjacents:  现实与当前也相邻的几个页面
     * $catname:  分类名，比如zmjs
     * $tagname:   标签名中文
     * $sort: 排序  "/$tagname-$sort-$page/"
     */
    public static function listPager($page, $pageSize, $totalCount, $adjacents, $catname, $tagname, $sort) {
        if($page == 0) $page = 1;                //默认从第一页开始
        $prev = $page - 1;
        $next = $page + 1;
        $lastPage = ceil($totalCount/$pageSize); //最后一页编号
        $lpm1 = $lastPage - 1;                   //倒数第二页编号

        $pagination = '';
        if($lastPage > 1) {
            $pagination .= "<div class=\"pagination\">";
            if($page > 1) {
                $pagination .= "<a href=\"/$catname/$tagname-$sort-$prev/\">上一页</a>";
            } else {
                $pagination .= "<span class=\"disabled\">上一页</span>";
            }
            if($lastPage < 7 + ($adjacents * 2)) { //不需要隐藏额外的页码
                for($counter = 1; $counter <= $lastPage; $counter++) {
                    if($counter == $page) {
                        $pagination .= "<span class=\"curr\">$counter</span>"; //高亮当前页
                    } else {
                        $pagination .= "<a href=\"/$catname/$tagname-$sort-$counter/\">$counter</a>"; //其余页面做成链接
                    }
                } 
            } elseif($lastPage > 5 + ($adjacents * 2)) { //页面很多，要隐藏部分页码
                if($page < 1 + ($adjacents * 2)) {       //靠近前面，隐藏后面的页面
                    for($counter = 1; $counter < 4 + ($adjacents * 2); $counter++) {
                        if($counter == $page) {
                            $pagination .= "<span class=\"curr\">$counter</span>";
                        } else {
                            $pagination .= "<a href=\"/$catname/$tagname-$sort-$counter/\">$counter</a>";
                        }
                    }
                    $pagination .= "...";
                    $pagination .= "<a href=\"/$catname/$tagname-$sort-$lpm1/\">$lpm1</a>";
                    $pagination .= "<a href=\"/$catname/$tagname-$sort-$lastPage/\">$lastPage</a>";
                } elseif($lastPage - ($adjacents * 2) > $page && $page > ($adjacents * 2)) { //在中间，前后都隐藏部分
                    $pagination .= "<a href=\"/$catname/$tagname-$sort-1/\">1</a>";
                    $pagination .= "<a href=\"/$catname/$tagname-$sort-2/\">2</a>";
                    $pagination . "...";
                    for($counter = $page - $adjacents; $counter <= $page + $adjacents; $counter++) {
                        if($counter == $page) {
                            $pagination .= "<span class=\"curr\">$counter</span>";
                        } else {
                            $pagination .= "<a href=\"/$catname/$tagname-$sort-$counter/\">$counter</a>";
                        }
                    }
                } else { //靠近尾部，隐藏前面部分
                    $pagination .= "<a href=\"/$catname/$tagname-$sort-1/\">1</a>";
                    $pagination .= "<a href=\"/$catname/$tagname-$sort-2/\">2</a>";
                    $pagination .= "...";
                    for($counter = $lastPage - (2 + ($adjacents * 2)); $counter <= $lastPage; $counter++) {
                        if($counter == $page) {
                            $pagination .= "<span class=\"/$catname/$tagname-$sort-$counter/\">$counter</span>";
                        } else {
                            $pagination .= "<a href=\"/$catname/$tagname-$sort-$counter/\">$counter</a>";
                        }
                    }
                }
            } //end elseif 对于很长的页面情况判断结束
            if($page < $counter - 1) {
                $pagination .= "<a href=\"/$catname/$tagname-$sort-$next/\">下一页</a>";
            } else {
                $pagination .= "<span class=\"disabled\">下一页</span>";
            }
            $pagination .= "</div>";
            return $pagination;
        } else {  //对于只有一页的情况，也做一个分页
            $pagination .= "<div class=\"pagination\">";
            $pagination .= "<span class=\"disabled\">上一页</span>";
            $pagination .= "<span class=\"curr\">1</span>";
            $pagination .= "<span class=\"disabled\">上一页</span>";
            $pagination .= "</div>";
            return $pagination;
        }
    }
}
</pre>


<p>在我的网站上面试验了一下，基本符合我的要求，不过难怪php和javascript都要做一个分页类，手动实现分页真是太累了。还好有人共享代码，不然自己写有得写了。</p>

<p>OMG,竟然把我代码里的html自动解析了，这让我怎么插入html代码啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jsonp的一点简单看法]]></title>
    <link href="http://xcaptain.github.io/blog/2014/08/12/jsonp-some-thought/"/>
    <updated>2014-08-12T22:28:53+08:00</updated>
    <id>http://xcaptain.github.io/blog/2014/08/12/jsonp-some-thought</id>
    <content type="html"><![CDATA[<h3>jsonp是ajax的异域传输技术</h3>

<p>因为我不懂javascript，更不用说jquery了，所以现在在做的一个需要后台请求的页面只能让前端去做。
昨晚在公司加班和前端对接口，但是到了9点也没有解决掉bug，太失望了，不过今天来了之后和一个大牛
说了一下，他立刻就指出了问题所在。</p>

<p>先简单描述一下我做的这个项目吧。</p>

<p>项目不麻烦，后端用php+yii框架处理好页面间数据流逻辑，前端使用css和js做一些特效。我这边的工作
都做得差不多了，但是有一个分类页涉及到多级选择的问题，最初的设计是一次性从后台取几百个数据出来
但是评估了一下发现这种方法可行性不好，一次加载太多内容对用户的体验不好，而且不能充分读取数据库
的内容。后面和前端商量了一下采用ajax请求的方式，打开一个页面之后只加载进当前页面的内容，剩下
的内容等用户点击相应的链接触发相应的js事件之后以jsonp的方式给服务器发请求，然后服务器把要显示的
内容取出来。</p>

<p>在我看来jsonp就是一个站给出接口，另一个站通过js获得这个接口给的数据。这样就是异域了，最大的好处就是
后端的压力减轻了，之前如果所有的页面都在一个站上，那么所有相关的信息都得后端开发人员想办法从数据库
中取，也就是俗话说的套页面。我是很反感套页面这种工作的，没有一点技术含量，枯燥无聊，但是不可否认，
在phpweb开发中很大一部分时间花在这里了。现在如果php程序员只要给出接口，前端写js获得这个接口的数据，
他们来渲染页面，这样真是大大减轻了后端的压力，节省下来的时间可以上g+上看看新闻，在博客上发发文章，
怎么说前端对于html要比后端熟悉。</p>

<p>前端给出的接口也有要求，最主要的内容就是回调。
<code>
echo $callback . “(“ . $data . “)”;
</code>
在php的代码里加上这个语句，<code>$callback</code>是jquery的回调函数，<code>$data</code>是要传出去的接口数据，一般是一个
json数组的形式。我这个站的$data是由4个参数共同生成的，前端访问接口的时候是通过<code>http://www.example.com/api/?callback=Jquery_function&amp;arg1=1&amp;arg2=2&amp;arg3=3&amp;arg4=4</code>
既然明白请求的形式了，那么很好知道这个接口文件的写法了。</p>

<pre>
$callback = $_GET[‘callback’]; //获得回调函数
$arg1     = $_GET[‘arg1’];
$arg2     = $_GET[‘arg2’];
$arg3     = $_GET[‘arg3’];
$arg4     = $_GET[‘arg4’]; //获得剩下的4个参数
$data     = some_func($arg1, $arg2, $arg3, $arg4); //通过某些函数获得要返回的数据
</pre>


<p>很神奇吧，当你点击一个网页的时候，这个页面不是立刻向后台请求数据，而是通过js从另一个接口文件里拿数据。</p>

<p>我的经验还是很不丰富啊，以后要多学习，不然遇到一点比较新的技术就搞半天太丢脸了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Eye on Octopress]]></title>
    <link href="http://xcaptain.github.io/blog/2014/08/11/first-eye-on-octopress/"/>
    <updated>2014-08-11T23:43:02+08:00</updated>
    <id>http://xcaptain.github.io/blog/2014/08/11/first-eye-on-octopress</id>
    <content type="html"><![CDATA[<h3>第一次使用octopress体验</h3>

<p>这几天突然发现php功能很弱，而python又总是拿来写脚本，没有真正用来开发过什么大型的项目。
为了早日实现全栈工程师的梦想，打算开始学习ruby。</p>

<p>在网上搜了一下ruby开始学习的方法，下载了几本电子书看，然后又发现了octopress这个开源项目，
我一直坚信学习不能单纯看书，所以很不错，看到了这个博客平台，以前在ghost blog上面用过一点
markdown，但是后来vps到期之后就没有继续写markdown了，现在很不熟练。</p>

<p>当初用ghost blog的时候是不太懂前端的东西，但是现在已经和html，js，css打了一个多月交道，
还算熟悉，以后肯定得自己动手改改theme，加点widget等。</p>

<p><a href="http://ruby-doc.org/docs/">ruby programming</a></p>
]]></content>
  </entry>
  
</feed>
