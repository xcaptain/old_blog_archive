<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Joey's Blog]]></title>
  <link href="http://xcaptain.github.io/atom.xml" rel="self"/>
  <link href="http://xcaptain.github.io/"/>
  <updated>2014-08-25T23:53:31+08:00</updated>
  <id>http://xcaptain.github.io/</id>
  <author>
    <name><![CDATA[joey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Customize Keyboard Layout]]></title>
    <link href="http://xcaptain.github.io/blog/2014/08/25/customize-keyboard-layout/"/>
    <updated>2014-08-25T23:32:42+08:00</updated>
    <id>http://xcaptain.github.io/blog/2014/08/25/customize-keyboard-layout</id>
    <content type="html"><![CDATA[<p>星期天膜拜了一位大牛，真是佩服他啊。</p>

<p>公司的一个统计功能出问题了，一直都没有把它修复，因为是历史遗留问题，找不到根源，所以
后来公司领导决定把原来这个功能的开发者找回来看看到底是出什么问题了。所以星期天我也来
公司看了一下大牛如何解决问题。</p>

<p>因为数据是前端通过访问一个php的接口写入redis得到的，所以大牛一直在调试redis。读取redis
数据的代码是用python写的。用emacs编辑这个python文件，在旁边开着1个终端使劲调。不得不说
他是我见过的emacs用得最好的一个了，我自己从大二开始接触linux开始就一直在vim和emacs之间
切换着写代码，对emacs也算不陌生，但是我就不能一只手写代码。而且使用emacs对我来说真是煎熬，
因为ctrl键太远了，要用小拇指按住这个键真是太吃力了。不过后来发现他时而使用左半部分手掌
压住ctrl键，时而使用右侧的ctrl键，所以都没有见到他的手大幅度移动但是就按出了很多键。</p>

<p>emacs是用来编辑查看代码的，要监控程序还得通过终端输入命令行来操作。大牛只登陆了一个终端，
但是确打开了很多个窗口，后来才发现他是用tmux来虚拟化多个窗口的，说道这个又伤心了一下，最初
刚来公司的时候我不会用xshell，所以用的是putty来远程登陆服务器写代码，那时候就曾经接触过
一段时间tmux，因为putty实在是不好新建窗口，太麻烦。如果那时候一直用着tmux到现在我说不定也
很熟练了，不过后来办公彻底有windows转移到linux之后就更没有去接触tmux了，因为在linux终端
新建一个连接更容易，ctrl+shift+t就行了。不得不说tmux真是个好东西，省去了多次登陆的麻烦，
虚拟多个窗口，可以按照你想要的方式排列窗口，对于监控某个程序来说真是再合适不过了，下面的
窗口运行程序，上面的窗口输出运行结果。</p>

<p>还发现一个很好用的工具，watch，这个命令是用来监控某个命令的输出的，如果某个程序持续输出
了内容，拿它来监控再合适不过了，不然就得反复输命令查看结果了。</p>

<p>被感染了，我也要学习使用emacs，也要学习使用tmux和各种命令行，不能止步于已经掌握的内容，今晚
折腾了一下emacs，改了一个键盘映射，把恼人的ctrl键和caplock键换了个位置。因为我现在用的系统
是archlinux+gnome3.12，所以直接调用一个系统设置改的，找到tweak tool然后在typing里面选择
swap ctrl and caplock,然后就ok了，新的键盘不是很习惯，慢慢来，现在ctrl靠近键盘中间了以后
使用emacs写代码应该是更方便了吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ssh-login-without-password]]></title>
    <link href="http://xcaptain.github.io/blog/2014/08/21/ssh-login-without-password/"/>
    <updated>2014-08-21T23:50:42+08:00</updated>
    <id>http://xcaptain.github.io/blog/2014/08/21/ssh-login-without-password</id>
    <content type="html"><![CDATA[<p>今天又拿到了一台服务器的权限，才来到这个公司没多久现在算一下已经拿到很多机器的权限了，本地测试机有3台，都拥有root权限，
线上服务器有5台，有部分root权限。刚开始用xshell登陆服务器还没什么觉得不方便的，但是现在我已经完全使用linux办公了，所以
只能用terminal来ssh连接服务器。手动输入密码太麻烦了，而且还是经常性的输密码。</p>

<p>今天又花了点时间看了一下公钥加密的过程这块，了解了一个ssh连接的基本流程。ssh登陆有2种方法：</p>

<ol>
<li>基于密码的验证。</li>
<li>基于公钥私钥的验证。</li>
</ol>


<p>基于密码的验证很好理解，当连接服务器的时候会提示你输入密码，等验证通过之后就能连接远程服务器了。这种方法很好理解，但是其实
局限性是很大的，首先麻烦，每次登陆都得输密码，而一个安全的密码又不是那么好记。其次密码被暴露的次数越多就越不安全，万一哪一次
在输入密码的时候被中间人给截获了这个密码，那么就没有丝毫秘密可言了。</p>

<p>而基于公钥私钥的验证相比起来就安全多了，在服务器中保存一份你自己的公钥，服务器就会知道你是授权了的用户，客户端连接服务器的时候
会检查这个用户的公钥是否在授权了的公钥列表中，如果在的话就放行，允许登陆。登陆之后加密的方法就很简单了，服务器用客户端的公钥加密信息
后传给客户端，客户端收到这个加密的信息之后用自己的私钥解密。然后客户端给服务器发送信息，用服务器的公钥加密，服务器收到之后拿自己的
私钥解密。</p>

<p>所以总的来说ssh连接就是2步，一步是验证身份，剩下的就是交换公钥的加密数据传输。</p>

<p>因为我现在都是使用运维给我分配的帐号密码来登陆服务器，每次连接都得输入密码很不方便，所以我还是改为通过公钥来验证身份好了。</p>

<p>首先给自己生成一个公钥私钥对，使用<code>ssh-keygen</code>生成公钥和私钥对，一般的命名规则是id_rsa和id_rsa.pub， 默认使用的加密方法是rsa，
默认使用2048字节的私钥。然后就是把自己的公钥添加到服务器上，保存在<code>~/.ssh/authorized_keys</code>里面。具体实现方法有很多，可以直接复制粘贴进去，
可以把公钥文件传到服务器上，也可以用一个简单的命令<code>ssh-copy-id</code>,这样就可以绕过手动输入密码了。</p>

<p>真是搞不懂，运维们有这么好的方法不用为什么要给一个账户创建密码呢，直接向我要一个公钥，然后加到服务器就行了嘛。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Freebsd-basic-operations]]></title>
    <link href="http://xcaptain.github.io/blog/2014/08/16/freebsd-basic-operations/"/>
    <updated>2014-08-16T22:04:13+08:00</updated>
    <id>http://xcaptain.github.io/blog/2014/08/16/freebsd-basic-operations</id>
    <content type="html"><![CDATA[<p>上周买了一年的vps，一直没怎么折腾，今天环境稍微配置了一下，其实基本的软件安装都是
很简单的，每个成熟的系统都有它自己的包管理器。我用类unix系统也不久，接触过的包管理
方式有debian/ubuntu系的dpkg和apt-get, opensuse的zypper, redhat的yum和arch的pacman
和freebsd的pkg，这这些发行版中我对于debian和arch还是比较熟悉的，freebsd也玩过但是
不是很熟悉它的命令行。</p>

<p>因为被公司的一台freebsd主机给震惊了，持续服务超过900天了，所以我买了vps之后没有
多想就安装了一个freebsd10的系统，因为这台机器硬件配置还是比较低的，只有768M的
内存。</p>

<p>首先安装nginx服务器，我还是比较习惯二进制安装，要我在服务器上编译nginx的源码
我才没有那个闲功夫呢。
<code>pkg install nginx</code>
这样就把nginx安装上了，如果要启动nginx得执行
<code>sudo /usr/local/etc/rc.d/nginx start</code>
因为我还没有想好在服务器上放什么，所以还没有具体配置nginx和fastcgi应用。</p>

<p>然后安装mariadb,这个没办法了必须得从源码安装，而且还没有办法安装mariadb10,只能
从源码编译5.5的版本。
<code>cd /usr/ports/databases/mariadb55-server</code>
<code>sudo make install clean</code>
编译的过程要很久，真怕生成一大堆临时文件让我可怜的15G固态硬盘受不了。漫长的等待时间过去
了，终于编译完了。默认的mariadb没有设置root的密码，为了明确权限肯定得设置密码。
<code>mysql -u root</code> 连接上数据库服务器之后就开始设置权限了，<code>set password for ‘root’@’localhost’ = password(‘yourpasswd’)</code>
这样就设置好了root的密码。</p>

<p>然后就是给root设置访问的权限了，<code>grant all privileges on *.* to ‘root’@’localhost’ with grant option</code>
这条命令是给root用户通过本地访问所有数据库的所有表的权限，如果我想要远程连接数据库稍微修改一下这条命令
就ok了。<code>grant all privileges on *.* to ‘root’@’%’ with grant option</code>，在mysql中<code>%</code>代表匹配任意字符串，所以
这条命令表示允许root通过任何ip来连接数据库。</p>

<p>本来还打算配置一下php的环境的，但是就我这几个月php开发的经历来看，这门语言实在是不值得花太多精力去学，
消耗巨大的内存，语言设计简陋，前后端分隔明显。我打算在服务器上搭建RoR的环境。</p>

<p>然后就是分配用户了，我新建了一个公共帐号public，操作也很简单<code>adduser</code>然后按照提示一步一步安装就好了，到了
最后还得考虑给这个用户分配权限的问题，我是通过sudo来管理root权限的，但是暂时没打算给这个公共号分配root权限。
后面还涉及到用户资源限制的问题，比如带宽资源，硬盘资源，cpu时间资源和内存资源，这些都是很专业的系统管理员
知识了，暂时没那个精力去学习。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个php分页示例]]></title>
    <link href="http://xcaptain.github.io/blog/2014/08/16/a-php-pagination-example/"/>
    <updated>2014-08-16T17:26:45+08:00</updated>
    <id>http://xcaptain.github.io/blog/2014/08/16/a-php-pagination-example</id>
    <content type="html"><![CDATA[<p>上次做的那个视频站有一个页面被领导否决了，因为之前是使用ajax加载数据的，他们说这种方法
对seo不友好，所以让我重新再写一遍。不得不吐槽这些可恶的领导了，虽然我们只是个小兵，可是
一句话就把我们辛辛苦苦写出来的代码给否决了，怎么说都还是很伤心的。不过伤心归伤心，活
还是的继续干的，谁让我们是给别人打工的呢。</p>

<p>之前的实现方法是用jsonp来做的，我用php写好接口，输出一个回调函数和数据，前端获得这个数据，
然后就能显示出页面了。不过现在要重写只能我自己来处理数据了。</p>

<p>首先遇到一个多级选择的问题，这个问题一点都不是问题，因为既然是反复请求，那么给每一级选项
加上一个参数，然后传给后台就能取出相应的数据了。真正让我比较烦恼的是分页的功能如何实现。</p>

<p>分页貌似简单，实则复杂。如果对于很少的页面当然可以把所有的页码罗列出来，但是如果页面很多，
比如一个分类有100个页面，那么如何显示这100个页面就是个问题了，通常的惯例是显示头几个，当前页
附近几个，和最后几个页面，剩下的用省略号表示。这时候就涉及到一个比较麻烦的问题了，怎么设计
当前的分页结构，使得页面均匀分布。</p>

<p>在网上搜了一段代码，稍微改动了一下加到我的页面中去了，不得不说这段代码的逻辑还是很复杂的，
我甚至都没有仔细去研究为什么要这么做，只是稍微看了一下各种情况对应的代码实现。</p>

<pre>
class BaseFunction {
    /**
     * lol.7k7k.com列表页分页函数
     * 返回一段html代码
     * $page  当前页面号码，如1,2
     * $totalCount: 总共视频数目，根据这个值获得总页数
     * $adjacents:  现实与当前也相邻的几个页面
     * $catname:  分类名，比如zmjs
     * $tagname:   标签名中文
     * $sort: 排序  "/$tagname-$sort-$page/"
     */
    public static function listPager($page, $pageSize, $totalCount, $adjacents, $catname, $tagname, $sort) {
        if($page == 0) $page = 1;                //默认从第一页开始
        $prev = $page - 1;
        $next = $page + 1;
        $lastPage = ceil($totalCount/$pageSize); //最后一页编号
        $lpm1 = $lastPage - 1;                   //倒数第二页编号

        $pagination = '';
        if($lastPage > 1) {
            $pagination .= "<div class=\"pagination\">";
            if($page > 1) {
                $pagination .= "<a href=\"/$catname/$tagname-$sort-$prev/\">上一页</a>";
            } else {
                $pagination .= "<span class=\"disabled\">上一页</span>";
            }
            if($lastPage < 7 + ($adjacents * 2)) { //不需要隐藏额外的页码
                for($counter = 1; $counter <= $lastPage; $counter++) {
                    if($counter == $page) {
                        $pagination .= "<span class=\"curr\">$counter</span>"; //高亮当前页
                    } else {
                        $pagination .= "<a href=\"/$catname/$tagname-$sort-$counter/\">$counter</a>"; //其余页面做成链接
                    }
                } 
            } elseif($lastPage > 5 + ($adjacents * 2)) { //页面很多，要隐藏部分页码
                if($page < 1 + ($adjacents * 2)) {       //靠近前面，隐藏后面的页面
                    for($counter = 1; $counter < 4 + ($adjacents * 2); $counter++) {
                        if($counter == $page) {
                            $pagination .= "<span class=\"curr\">$counter</span>";
                        } else {
                            $pagination .= "<a href=\"/$catname/$tagname-$sort-$counter/\">$counter</a>";
                        }
                    }
                    $pagination .= "...";
                    $pagination .= "<a href=\"/$catname/$tagname-$sort-$lpm1/\">$lpm1</a>";
                    $pagination .= "<a href=\"/$catname/$tagname-$sort-$lastPage/\">$lastPage</a>";
                } elseif($lastPage - ($adjacents * 2) > $page && $page > ($adjacents * 2)) { //在中间，前后都隐藏部分
                    $pagination .= "<a href=\"/$catname/$tagname-$sort-1/\">1</a>";
                    $pagination .= "<a href=\"/$catname/$tagname-$sort-2/\">2</a>";
                    $pagination . "...";
                    for($counter = $page - $adjacents; $counter <= $page + $adjacents; $counter++) {
                        if($counter == $page) {
                            $pagination .= "<span class=\"curr\">$counter</span>";
                        } else {
                            $pagination .= "<a href=\"/$catname/$tagname-$sort-$counter/\">$counter</a>";
                        }
                    }
                } else { //靠近尾部，隐藏前面部分
                    $pagination .= "<a href=\"/$catname/$tagname-$sort-1/\">1</a>";
                    $pagination .= "<a href=\"/$catname/$tagname-$sort-2/\">2</a>";
                    $pagination .= "...";
                    for($counter = $lastPage - (2 + ($adjacents * 2)); $counter <= $lastPage; $counter++) {
                        if($counter == $page) {
                            $pagination .= "<span class=\"/$catname/$tagname-$sort-$counter/\">$counter</span>";
                        } else {
                            $pagination .= "<a href=\"/$catname/$tagname-$sort-$counter/\">$counter</a>";
                        }
                    }
                }
            } //end elseif 对于很长的页面情况判断结束
            if($page < $counter - 1) {
                $pagination .= "<a href=\"/$catname/$tagname-$sort-$next/\">下一页</a>";
            } else {
                $pagination .= "<span class=\"disabled\">下一页</span>";
            }
            $pagination .= "</div>";
            return $pagination;
        } else {  //对于只有一页的情况，也做一个分页
            $pagination .= "<div class=\"pagination\">";
            $pagination .= "<span class=\"disabled\">上一页</span>";
            $pagination .= "<span class=\"curr\">1</span>";
            $pagination .= "<span class=\"disabled\">上一页</span>";
            $pagination .= "</div>";
            return $pagination;
        }
    }
}
</pre>


<p>在我的网站上面试验了一下，基本符合我的要求，不过难怪php和javascript都要做一个分页类，手动实现分页真是太累了。还好有人共享代码，不然自己写有得写了。</p>

<p>OMG,竟然把我代码里的html自动解析了，这让我怎么插入html代码啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jsonp的一点简单看法]]></title>
    <link href="http://xcaptain.github.io/blog/2014/08/12/jsonp-some-thought/"/>
    <updated>2014-08-12T22:28:53+08:00</updated>
    <id>http://xcaptain.github.io/blog/2014/08/12/jsonp-some-thought</id>
    <content type="html"><![CDATA[<h3>jsonp是ajax的异域传输技术</h3>

<p>因为我不懂javascript，更不用说jquery了，所以现在在做的一个需要后台请求的页面只能让前端去做。
昨晚在公司加班和前端对接口，但是到了9点也没有解决掉bug，太失望了，不过今天来了之后和一个大牛
说了一下，他立刻就指出了问题所在。</p>

<p>先简单描述一下我做的这个项目吧。</p>

<p>项目不麻烦，后端用php+yii框架处理好页面间数据流逻辑，前端使用css和js做一些特效。我这边的工作
都做得差不多了，但是有一个分类页涉及到多级选择的问题，最初的设计是一次性从后台取几百个数据出来
但是评估了一下发现这种方法可行性不好，一次加载太多内容对用户的体验不好，而且不能充分读取数据库
的内容。后面和前端商量了一下采用ajax请求的方式，打开一个页面之后只加载进当前页面的内容，剩下
的内容等用户点击相应的链接触发相应的js事件之后以jsonp的方式给服务器发请求，然后服务器把要显示的
内容取出来。</p>

<p>在我看来jsonp就是一个站给出接口，另一个站通过js获得这个接口给的数据。这样就是异域了，最大的好处就是
后端的压力减轻了，之前如果所有的页面都在一个站上，那么所有相关的信息都得后端开发人员想办法从数据库
中取，也就是俗话说的套页面。我是很反感套页面这种工作的，没有一点技术含量，枯燥无聊，但是不可否认，
在phpweb开发中很大一部分时间花在这里了。现在如果php程序员只要给出接口，前端写js获得这个接口的数据，
他们来渲染页面，这样真是大大减轻了后端的压力，节省下来的时间可以上g+上看看新闻，在博客上发发文章，
怎么说前端对于html要比后端熟悉。</p>

<p>前端给出的接口也有要求，最主要的内容就是回调。
<code>
echo $callback . “(“ . $data . “)”;
</code>
在php的代码里加上这个语句，<code>$callback</code>是jquery的回调函数，<code>$data</code>是要传出去的接口数据，一般是一个
json数组的形式。我这个站的$data是由4个参数共同生成的，前端访问接口的时候是通过<code>http://www.example.com/api/?callback=Jquery_function&amp;arg1=1&amp;arg2=2&amp;arg3=3&amp;arg4=4</code>
既然明白请求的形式了，那么很好知道这个接口文件的写法了。</p>

<pre>
$callback = $_GET[‘callback’]; //获得回调函数
$arg1     = $_GET[‘arg1’];
$arg2     = $_GET[‘arg2’];
$arg3     = $_GET[‘arg3’];
$arg4     = $_GET[‘arg4’]; //获得剩下的4个参数
$data     = some_func($arg1, $arg2, $arg3, $arg4); //通过某些函数获得要返回的数据
</pre>


<p>很神奇吧，当你点击一个网页的时候，这个页面不是立刻向后台请求数据，而是通过js从另一个接口文件里拿数据。</p>

<p>我的经验还是很不丰富啊，以后要多学习，不然遇到一点比较新的技术就搞半天太丢脸了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Eye on Octopress]]></title>
    <link href="http://xcaptain.github.io/blog/2014/08/11/first-eye-on-octopress/"/>
    <updated>2014-08-11T23:43:02+08:00</updated>
    <id>http://xcaptain.github.io/blog/2014/08/11/first-eye-on-octopress</id>
    <content type="html"><![CDATA[<h3>第一次使用octopress体验</h3>

<p>这几天突然发现php功能很弱，而python又总是拿来写脚本，没有真正用来开发过什么大型的项目。
为了早日实现全栈工程师的梦想，打算开始学习ruby。</p>

<p>在网上搜了一下ruby开始学习的方法，下载了几本电子书看，然后又发现了octopress这个开源项目，
我一直坚信学习不能单纯看书，所以很不错，看到了这个博客平台，以前在ghost blog上面用过一点
markdown，但是后来vps到期之后就没有继续写markdown了，现在很不熟练。</p>

<p>当初用ghost blog的时候是不太懂前端的东西，但是现在已经和html，js，css打了一个多月交道，
还算熟悉，以后肯定得自己动手改改theme，加点widget等。</p>

<p><a href="http://ruby-doc.org/docs/">ruby programming</a></p>
]]></content>
  </entry>
  
</feed>
