<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Joey's blog</title>
    <link href="http://blog.iyue.club/rss.xml" rel="self" />
    <link href="http://blog.iyue.club" />
    <id>http://blog.iyue.club/rss.xml</id>
    <author>
        <name>Joey Xie</name>
        <email>joey.xf@gmail.com</email>
    </author>
    <updated>2015-12-10T00:00:00Z</updated>
    <entry>
    <title>博客迁移到hakyll上</title>
    <link href="http://blog.iyue.club/posts/2015-12-10-switch-to-hakyll.html" />
    <id>http://blog.iyue.club/posts/2015-12-10-switch-to-hakyll.html</id>
    <published>2015-12-10T00:00:00Z</published>
    <updated>2015-12-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h3 id="准备完全迁移到hakyll上面了">准备完全迁移到hakyll上面了</h3>
<p>之前博客一直都是用octopress搭建的，然后托管在github-pages上面，虽然早就有换成hakyll的打算了，但是一直拖到现在才下定决心迁移，也是够久的了。 最重要的一点就是我是一个hacker，geeker，我喜欢自定义工具，我不想尝试别人做好的直接拿来用的工具。</p>]]></summary>
</entry>
<entry>
    <title>php使用rabbitmq队列处理数据推送</title>
    <link href="http://blog.iyue.club/posts/2015-09-14-php-use-rabbitmq.html" />
    <id>http://blog.iyue.club/posts/2015-09-14-php-use-rabbitmq.html</id>
    <published>2015-09-14T00:00:00Z</published>
    <updated>2015-09-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="使用rabbitmq作为消息队列软件">使用rabbitmq作为消息队列软件</h2>
<h3 id="为什么使用rabbitmq">为什么使用rabbitmq</h3>
<h3 id="可选的队列软件">可选的队列软件</h3>
<h3 id="安装及配置rabbitmq">安装及配置rabbitmq</h3>
<h2 id="使用eloquent来操作模型">使用Eloquent来操作模型</h2>
<h3 id="为什么使用eloquent">为什么使用Eloquent</h3>
<ol style="list-style-type: decimal">
<li><p>Propel</p></li>
<li><p>Doctrine2</p></li>
<li><p>eloquent</p></li>
</ol>
<h3 id="eloquent处理sharding">eloquent处理sharding</h3>
<h2 id="处理拉取逻辑">处理拉取逻辑</h2>
<h3 id="表结构设计">表结构设计</h3>
<h3 id="如何获得最新的信息流">如何获得最新的信息流</h3>]]></summary>
</entry>
<entry>
    <title>学习使用postgresql</title>
    <link href="http://blog.iyue.club/posts/2015-07-22-use-postgresql.html" />
    <id>http://blog.iyue.club/posts/2015-07-22-use-postgresql.html</id>
    <published>2015-07-22T00:00:00Z</published>
    <updated>2015-07-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>对mysql有点厌倦了，因为用的人多就会导致产品趋于平凡，就算是mariadb也是一样，所以有必要了解一下postgresql。</p>
<p>首先讲讲postgresql的安装配置吧，我是从<a href="https://wiki.debian.org/PostgreSql">debian官方</a>上面找到的wiki， 操作很简单，但是首先就感觉postgresql和mysql的设计哲学有点区别。要让一个用户能够访问pgsql的数据库，首先得在 操作系统上面创建对应的用户，然后用postgres这个默认的超级用户去连接默认的postgres数据库，连接上之后再在服务器 里面创建一个同名的用户，然后是创建一个数据库，然后是分配数据库访问权限，感觉这个过程很繁琐而且有点反人类。像 mysql是不需要在操作系统上面创建用户的，直接create user就可以，然后设置密码，分配数据库访问权限。</p>
<p>接下来就是具体如何操作postgresql了，这部分得慢慢来，毕竟我刚学着用。</p>]]></summary>
</entry>
<entry>
    <title>php编码规范</title>
    <link href="http://blog.iyue.club/posts/2015-07-14-php-coding-style.html" />
    <id>http://blog.iyue.club/posts/2015-07-14-php-coding-style.html</id>
    <published>2015-07-14T00:00:00Z</published>
    <updated>2015-07-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>之前写代码的时候一直不是很在意编码规范的问题，感觉只要把代码功能实现了就OK，但是看到越来越多的优秀开 源项目都给自己的项目制定了编码规范，提交PR必须要满足规范才能合并到主干，而且自己搞php开发也已经有1 年了，得开始走向规范化开发的道路。</p>
<p>首先得介绍一下psr2，目前<a href="http://laravel.com/">laravel</a>项目使用的就是这个风格标准，具体的规定 在<a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md">这里</a> 我以前的习惯大部分符合psr2的标准，但是因为渐渐的使用到了很多高级的php特性，比如说closure, trait, 抽象类等， 所以还是得纠正一点小的习惯。</p>
<p>除了psr2这个标准之外，各大公司也有自己内部使用的标准，比如说symfony, wordpress, squiz等，还是靠拢 国际标准吧，目前我的emacs里面的php-mode的设置就是psr2的标准，自动格式化代码省了点心。</p>
<p>代码写完了之后提交到github上却总是发现过不了持续集成(Continuous Integration)的审核，我自己目前几个个人 项目使用的是<a href="https://styleci.io/">styleci</a>这个在线审核的工具，功能很简单但是很强大，最初几次提交 总是会给我返回很多fail，导致严格要求自己按照编码规范来。</p>
<p>为了避免提交之后被styleci给鄙视，从网上找到了<a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP_CodeSniffer</a>这个 小工具，叫做php嗅探器，它其实包括2个小部件，一个是phpcs(php coding style)，另一个是phpcbf(PHP Code Beautifier and Fixer)， 前者只检查代码的问题，后者还会帮忙纠正代码，如果信不过机器帮忙纠正代码，那么之前一定的记得提交代码。根据官方文档上的 说明修改配置，简单使用，效果很不错。后来我又找了一个叫做<a href="https://github.com/nishimaki10/emacs-phpcbf">emacs-phpcbf</a>的 小工具，这个是一个emacs的插件配置好之后可以集成到php-mode里面，稍加配置就可以在保存php文件的时候自动纠正错误。</p>
<p>后面发现通过phpcbf纠错的代码还是不能通过styleci，找了一下发现styleci用的是一个叫做<a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer">php-cs-fixer</a> 的引擎来审核代码的，又对照着装了一个php-cs-fixer，和phpcbf的功能差不多，但是稍微严格一点，对于额外的空行也会删掉。</p>
<p>码农要往正规化方向走，现在养成一下编码规范的习惯，以后再来培养测试驱动的习惯。</p>]]></summary>
</entry>
<entry>
    <title>迁移一个discuz站点</title>
    <link href="http://blog.iyue.club/posts/2015-06-23-migrate-a-discuz-site.html" />
    <id>http://blog.iyue.club/posts/2015-06-23-migrate-a-discuz-site.html</id>
    <published>2015-06-23T00:00:00Z</published>
    <updated>2015-06-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>周五晚上帮同事迁移了一个网站，原来的<a href="http://www.huizu100.com">网站</a>是搭建在windows2003服务器上的，使用的是apache2 + php5.3 + mysql5.1 的架构，使用的是一个叫作PHPnow的一键安装包来管理服务器的，这种架构对于个人站长来说很方便，只要设置好了配置就可以自己搭建网站，但是扩展性特别差，简直就是没法维护，win2003本来就是老掉牙的技术了，这种服务器长期跑肯定是会有内存问题的，而用PHPnow搭建的网站，数据库，代码，数据都在一个目录里面，这样潜在的问题太大了，首先就是安全性问题，没有数据库本来应该单独放到一个专门的服务器上的。而且所有数据放在一起对于业务分离，备份也很不方便，一下备份一个几十G大的目录是很浪费资源的。</p>
<p>所以在我的建议下，周五晚上对这个网站做了一个迁移，新的架构是LNMP，ubuntu 15.04 server + nginx 1.6 + hhvm 3.7 + mariadb 10.0.20 + redis 3.0，当然因为服务器只有一台，所以没有做负载均衡，没有做数据库读写分离，也没有做hhvm的均衡，因为等我把环境搭建完的时候就已经很稳定了，所以暂时不打算那么做，下面简单的来说说迁移过程。</p>
<ol style="list-style-type: decimal">
<li><p>服务器安装 我给的建议是装ubuntu，因为将来环境稳定下来之后要把权限分给站长，让他自己上去查看管理一些进程，而ubuntu的桌面又是比较简单易用的。本来他们是打算安装ubuntu 15.04 desktop版的，但是因为这个版本没法驱动DELL r710服务器自带的硬Raid，所以最后换成server版了。</p></li>
<li><p>nginx，mariadb，hhvm，redis这些软件的安装都很简单，唯一一个比较特殊的功能就是用了hhvm来替换php，不过暂时没有感到太大的性能提升。LNMP环境搭建是很简单的，很快就完成了。</p></li>
<li><p>接下来是服务器配置 最大的问题就是调整分区结构，服务器上有一块300G的自带硬盘，这款盘其实是由2块一样的硬盘搭建的raid0，自带了数据备份功能，所以这块盘理论上来说是不该保存太多系统以外的东西的。然后是1块1T的绿盘，这块盘的年头比较老了，以前的网站就部署在这块盘上，我打算把这个盘拿来当备份盘，还有一块2T的黑盘，这块盘是一块最新最好的数据盘，所以我打算把网站和数据库都放在这块盘上。首先要把这块2T的盘里面的数据备份了，很重要的资料一定得保存，但是里面用PHPNow的工具全量备份了站点，一个备份40G，备份一周的数据，复制这些内容浪费了好多时间。数据备份完了之后就是给硬盘分区，先分区那块2T的盘，准备分4个区，按照300+300+600+600来分，虽然暂时没有想好具体怎么使用，用<code>fdisk /dev/sdb</code>开始分区，分区之后就是创建文件系统，只用ext4，所以<code>mkfs.ext4 /dev/sdbn</code>。</p></li>
<li><p>部署网站 这步就很简单了，直接复制代码，修改配置，修改权限，有一个比较大的问题是discuz的图片是存放在一个叫做<code>data/attachment</code>的目录下的，这些图片完全可以和代码分离，所以拿一块额外的分区来装就行，我是挂载的那个600G的分区到这个目录的。<code>mount /dev/sdb6 /pathtodata/attachment</code>。</p></li>
</ol>
<p>部署完成之后调试了一下网站就跑起来了，但是还有很多要做的事，discuz的代码结构比较混乱，不好改动，而且原来他的网站语言设置是GBK的，涉及到编码问题又更加复杂了，反正直到周日晚上才把问题全部解决，目前就是陆陆续续做一些服务器的小性能调优。</p>
<p>6月25日更新： 这几天陆陆续续发现了一些bug，有样式错误的，有插件报错的，有缓存不能及时清的等等，突然感觉压力好大，工作日只能下班之后有时间做自己的事，端午节3天假2天加一晚上都折腾那个网站去了，本以为是没什么事了，没想到后续的问题更多更麻烦，早知道就不轻易答应人家了，而且以后坚决不再折腾discuz，继续折腾这个东西只会浪费我更多时间。</p>]]></summary>
</entry>
<entry>
    <title>学习gulp</title>
    <link href="http://blog.iyue.club/posts/2015-06-07-learn-gulp.html" />
    <id>http://blog.iyue.club/posts/2015-06-07-learn-gulp.html</id>
    <published>2015-06-07T00:00:00Z</published>
    <updated>2015-06-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>学习使用gulp来进行前端开发</p>]]></summary>
</entry>
<entry>
    <title>上powerline</title>
    <link href="http://blog.iyue.club/posts/2015-06-03-use-powerline.html" />
    <id>http://blog.iyue.club/posts/2015-06-03-use-powerline.html</id>
    <published>2015-06-03T00:00:00Z</published>
    <updated>2015-06-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>看到身边的同事好多都切换到zsh+powerline这样的组合了，总是在我面前炫耀操作git如何方便，用了很久一直没有更新<a href="https://github.com/oh-my-fish/oh-my-fish">oh-my-fish</a>之后，今晚总算是完全更新了一下配置，向更加高大上的方向进发。</p>
<p>首先是安装<a href="https://github.com/oh-my-fish/oh-my-fish">oh-my-fish</a>，这步还是很简单的，有一键安装脚本执行。</p>
<p>然后是安装<a href="https://github.com/powerline/powerline">powerline</a>，这是一个用python写的状态插件，以前我就在vim和emacs上用过，在我的urxvt上面还没有配置过，照着<a href="https://powerline.readthedocs.org/en/latest/">文档</a>简单配置了一下，也是很简单的，但是最后我发现我的urxvt终端模拟器没法使用默认的powerline字体，后来从<a href="https://github.com/powerline/fonts">这里</a>找到了几个字体补丁，把我的.Xresources文件修改一下之后就能使用powerline字体了，真是不错。</p>
<p>现在使用的主题是<a href="https://github.com/oh-my-fish/theme-agnoster">agnoster</a>，功能和配色都挺符合我的胃口的，默认支持powerline，git的状态显示也很不错。</p>
<p>顺便重新配置了一下tmux，以前多任务都是通过urxvt的新建tab来实现的，如果到了别的终端环境如何复用终端呢？还是使用tmux吧，而且也可以配置tmux使得它支持powerline，很不错的setup</p>]]></summary>
</entry>
<entry>
    <title>学习rails</title>
    <link href="http://blog.iyue.club/posts/2015-06-01-learn-rails.html" />
    <id>http://blog.iyue.club/posts/2015-06-01-learn-rails.html</id>
    <published>2015-06-01T00:00:00Z</published>
    <updated>2015-06-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>学习rails，自己做一个简单的rails项目。</p>
<ol style="list-style-type: decimal">
<li><p><a href="https://github.com/plataformatec/devise">devise</a>验证权限</p></li>
<li><p><a href="http://www.postgresql.org/">postgresql</a>来持久化数据</p></li>
<li><p><a href="https://github.com/mperham/sidekiq">sidekiq</a>用来做队列</p></li>
<li><p><a href="https://github.com/sj26/mailcatcher">mailcatcher</a>用来捕获测试环境发放的邮件</p></li>
</ol>
<p>每个功能都有对应的gem，web开发真是简化了很多。</p>]]></summary>
</entry>
<entry>
    <title>学习git</title>
    <link href="http://blog.iyue.club/posts/2015-06-01-learn-git.html" />
    <id>http://blog.iyue.club/posts/2015-06-01-learn-git.html</id>
    <published>2015-06-01T00:00:00Z</published>
    <updated>2015-06-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>继续学习git，把统计后台的代码从内部git服务器迁移到github上面了，用的是自己的私有仓库。</p>
<p>目前主要用到的功能有：</p>
<ol style="list-style-type: decimal">
<li><p>添加远程仓库 <code>git remote add origin https://github.com/xcaptain/simple-admin.git</code> 这样就能添加一个远程仓库了，等以后把代码push上去就行了，访问远程仓库的方式有2种，一种是ssh，一种是https，上面这种是https的仓库，也是github默认的访问仓库的方法， 因为ssh太不安全了，对于我们这种生活在封锁国度的老百姓来说，很容易被屏蔽。</p></li>
<li><p>往远程仓库里面提交代码 <code>git commit -m 'some comment'</code> 这样就可以提交代码，返回一个hash值标识的版本号，提交之后代码版本还在本地，如果要多方合作开发，那就得把改动保存到一个大家都可以访问的远程仓库， <code>git push origin master</code>，把本地版本推送到远程的master分支。</p></li>
<li><p>建立本地分支 <code>git branch dev</code> 这样就在本地创建了一个叫做dev的分支，并且会自动切换到这个dev分支，如果建了好多个分支，想查看当前自己在哪个分支，直接<code>git branch</code>就会列出，当然如果使用的是zsh或者是 fish这样的shell，一般都会有git的插件，可以显示当前所在分支。</p></li>
<li><p>把本地分支添加到远程仓库 <code>git checkout dev</code>切换到dev分支，然后<code>git push origin dev</code>就可以把代码推送到远程仓库的dev分支了。</p></li>
<li><p>打标签 <code>git tag</code>可以查看当前版本库的所有标签信息，如果要添加标签，那么就是<code>git tag -a v0.2 -m '优化流量统计代码，统一风格'</code>添加一个叫作v0.2的标签，并且提交。如果要把 本地的标签信息提交到远程仓库，那么就是<code>git push --tags</code>，然后去github上查看就能看到对应的v0.2版本了。</p></li>
<li><p>查看提交版本 <code>git log</code>, <code>git diff</code>，我一般喜欢用emacs的magit插件来查看diff和版本。</p></li>
<li><p>把未暂存的文件回滚 <code>git checkout file1</code>，这样会从版本库中检出上一个提交的file1的版本，覆盖掉当前这个未提交的版本。</p></li>
<li><p>回滚版本库 这个操作目前做得比较少，都是<code>git reset --hard HEAD~1</code>，来回到上一个版本的，对于这个操作还不熟悉，至少svn回滚已经是很熟悉的了。</p></li>
</ol>
<p>git的功能很强大也很复杂，但是一定是要掌握的，这样才能成为一个合格的项目经理，以后慢慢积累，有新的体会再来更新这篇博客。</p>]]></summary>
</entry>
<entry>
    <title>php的getter方法</title>
    <link href="http://blog.iyue.club/posts/2015-05-23-php-getter.html" />
    <id>http://blog.iyue.club/posts/2015-05-23-php-getter.html</id>
    <published>2015-05-23T00:00:00Z</published>
    <updated>2015-05-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>这几天做统计后台频繁用到一个叫做<a href="http://carbon.nesbot.com/">Carbon</a>的日期库，用多了发现这个库的接口设计得非常方便，方法非常自然，稍微用几次就知道用法了。比如说好多方法都是静态方法，省去了频繁构造对象的开销。最方便的还是里面的getter方法，<code>$dt-&gt;year</code>就返回了本年，这个year很明显是一个静态方法，因为$dt不是new出来的对象，但是我们看起来就好像是直接访问一个类的属性一样。</p>
<div class="sourceCode"><pre class="sourceCode php"><code class="sourceCode php"><span class="kw">class</span> <span class="kw">A</span> {
    <span class="kw">public</span> <span class="kw">function</span> year<span class="ot">()</span> {
        <span class="kw">return</span> <span class="dv">2015</span><span class="ot">;</span>
    }
    <span class="kw">public</span> <span class="kw">static</span> <span class="kw">function</span> <span class="fu">__get</span><span class="ot">(</span><span class="kw">$var</span><span class="ot">)</span> {
        <span class="kw">return</span> <span class="kw">$this</span>-&gt;<span class="kw">$var</span><span class="ot">();</span>
    }
}
a = <span class="kw">new</span> <span class="kw">A</span><span class="ot">;</span>
<span class="fu">echo</span> a-&gt;year<span class="ot">;</span></code></pre></div>
<p>是getter的一种简单写法，挺不错的。</p>]]></summary>
</entry>

</feed>
